import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as n}from"./app-DjF3qBm_.js";const e="/web-docs/assets/code-BRP-Nefo.png",t={},l=n('<h1 id="vue-set-vm-set-的使用和原理" tabindex="-1"><a class="header-anchor" href="#vue-set-vm-set-的使用和原理"><span>Vue.set / vm.$set 的使用和原理</span></a></h1><h2 id="vue-set-的基本使用" tabindex="-1"><a class="header-anchor" href="#vue-set-的基本使用"><span><a href="https://v2.cn.vuejs.org/v2/api/#Vue-set" target="_blank" rel="noopener noreferrer">Vue.set</a> 的基本使用</span></a></h2><p>语法：<code>Vue.set( target, propertyName/index, value )</code></p><ul><li><p><strong>参数</strong>：</p><ul><li><code>{Object | Array} target</code></li><li><code>{string | number} propertyName/index</code></li><li><code>{any} value</code></li></ul></li><li><p><strong>返回值</strong>：设置的值。</p></li><li><p><strong>作用</strong>：</p><p>由于在 <code>vue2</code> 中使用的 <strong>响应式</strong> <code>api</code> 采用的是 <code>defineProperty</code>，而这个 <code>api</code> 是有一定的缺陷的，它监听不到新增的对象属性，也监听不到数组长度的变化。</p><p>所以，这个 <code>set</code> 的作用就是：向响应式对象中添加一个 <code>property</code>，并确保这个新 <code>property</code> 同样是 <strong>响应式</strong> 的，且 <strong>触发视图更新</strong>。它必须用于向响应式对象上添加新 <code>property</code>，因为 <code>Vue</code> 无法探测普通的新增 <code>property</code>。</p></li><li><p><strong>用法</strong>：</p><p>修改对象的使用：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 修改 obj 对象上的 key 属性，修改的值为 value</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改数组的使用：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 修改 arr 数组中 index 项的值为 value</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h2 id="vue-set-的原理" tabindex="-1"><a class="header-anchor" href="#vue-set-的原理"><span>Vue.set 的原理</span></a></h2><p>我们可以在 <code>vue</code> 的 <a href="https://github.com/vuejs/vue/blob/2.6/src/core/observer/index.js#L173" target="_blank" rel="noopener noreferrer">源码仓库</a> 里看到相关的代码实现：</p><p><img src="'+e+`" alt="code"></p><p>源码如下：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * Set a property on an object. Adds the new property and</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * triggers change notification if the property doesn&#39;t</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * already exist.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 判断是否为原始数据类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;production&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isUndef</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> isPrimitive</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    warn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">\`Cannot set reactive property on undefined, null, or primitive value: </span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> any</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">)}\`)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 如果是数组</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">  if (Array.isArray(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">) &amp;&amp; isValidArrayIndex(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">    target.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">target</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">    target.splice(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">, val)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">    return </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">val</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 如果是对象，并且该属性已经在对象身上，直接修改即可</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  if</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">prototype</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">    target[</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;"> = val</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">    return val</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 如果是 vue 实例或者跟数据 data 时，报错</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">  const ob = (target</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">any</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">__ob__</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  if</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">target</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">_isVue</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ob</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ob</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">vmCount</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">    process.env.NODE_ENV !== </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;production&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;"> &amp;&amp; warn(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">      &#39;Avoid adding reactive properties to a Vue instance or its root $data &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">      &#39;at runtime - declare it upfront in the data option.&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">    )</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">    return val</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 如果不是响应式数据的也不需要将其定义成响应式属性</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">  if (!ob) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">    target[key] = val</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">    return val</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 将属性定义成响应式的</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">  defineReactive(ob.value, key, val)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 通知视图更新</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">  ob.dep.notify()</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">  return val</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，会对第一个参数进行判断，因为我们 <strong>不能</strong> 给它传一个 <strong>原始数据类型</strong>做为参数。否则会报错：<code>Cannot set reactive property on undefined, null, or primitive value</code>。</p><p>然后，它会进行判断是否为数组，如果为数组，直接调用数组的 <code>splice</code> 方法。因为这个 <code>splice</code> 方法是被 <code>vue2</code> 重写的 <code>splice</code>，所以只要一调用这个 <code>splice</code> 方法，就可以更新视图了。</p><p>再然后，判断是否为对象，如果是对象的话，还要看一下这个对象是否已经有这个属性，如果之前已经有这个属性了，说明它这个属性就已经是响应式的了，现在还用 <code>set</code> 进行更新，那么就直接 <code>target[key] = val</code> 就行了。因为响应式中 <code>defineProperty</code> 本身是能监听到对象属性的修改的。</p><p>再然后，还要判断一下如果是对象的情况下，这个对象是不是 <code>Vue</code> 的实例或者是不是跟数据 <code>data</code> 对象，如果是则报错。</p><p>再然后，如果这个属性它不是响应式的，它也不需要设置为响应式，因为它本身这个数据就不能是响应式的。</p><p>比方说我定义了一个对象 <code>const obj = { a: 1 }</code>，这个对象并没有被 <code>defineProperty</code> 包装过，它就是一个普通的对象。那么就直接 <code>target[key] = val</code> 即可。</p><p>最后一种情况就是，需要把这个属性变成响应式的，所以需要通过调用 <code>defineReactive(ob.value, key, val)</code> 去包装这个 <code>ob.value</code> 对象的 <code>key</code> 属性。</p><p>最重要的是最后要通知视图更新。</p>`,17),h=[l];function k(p,r){return a(),s("div",null,h)}const c=i(t,[["render",k],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Vue/Vue2/%E5%8E%9F%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80/Vue.set/","title":"Vue.set / vm.$set 的使用和原理","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Vue.set 的基本使用","slug":"vue-set-的基本使用","link":"#vue-set-的基本使用","children":[]},{"level":2,"title":"Vue.set 的原理","slug":"vue-set-的原理","link":"#vue-set-的原理","children":[]}],"git":{"createdTime":1722103122000,"updatedTime":1722103122000,"contributors":[{"name":"wr","email":"893634104@qq.com","commits":1}]},"readingTime":{"minutes":3.02,"words":905},"filePathRelative":"前端/框架/Vue/Vue2/原理和基础/Vue.set/README.md","localizedDate":"2024年7月28日","excerpt":"\\n<h2><a class=\\"header-anchor\\" href=\\"#vue-set-的基本使用\\"><span></span></a><a href=\\"https://v2.cn.vuejs.org/v2/api/#Vue-set\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Vue.set</a> 的基本使用</h2>\\n<p>语法：<code>Vue.set( target, propertyName/index, value )</code></p>\\n<ul>\\n<li>\\n<p><strong>参数</strong>：</p>\\n<ul>\\n<li><code>{Object | Array} target</code></li>\\n<li><code>{string | number} propertyName/index</code></li>\\n<li><code>{any} value</code></li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>返回值</strong>：设置的值。</p>\\n</li>\\n<li>\\n<p><strong>作用</strong>：</p>\\n<p>由于在 <code>vue2</code> 中使用的 <strong>响应式</strong> <code>api</code> 采用的是 <code>defineProperty</code>，而这个 <code>api</code> 是有一定的缺陷的，它监听不到新增的对象属性，也监听不到数组长度的变化。</p>\\n<p>所以，这个 <code>set</code> 的作用就是：向响应式对象中添加一个 <code>property</code>，并确保这个新 <code>property</code> 同样是 <strong>响应式</strong> 的，且 <strong>触发视图更新</strong>。它必须用于向响应式对象上添加新 <code>property</code>，因为 <code>Vue</code> 无法探测普通的新增 <code>property</code>。</p>\\n</li>\\n<li>\\n<p><strong>用法</strong>：</p>\\n<p>修改对象的使用：</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">Vue</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">set</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">obj</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">key</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">value</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">) </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">// 修改 obj 对象上的 key 属性，修改的值为 value</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><p>修改数组的使用：</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">Vue</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">set</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">arr</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">index</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">value</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">) </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">// 修改 arr 数组中 index 项的值为 value</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ul>"}');export{c as comp,o as data};
