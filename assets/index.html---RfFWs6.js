import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,b as t}from"./app-yQAcOzkj.js";const l="/web-docs/assets/1719992251274-9c3c42b6-4964-4011-b2e8-653ae5da02df-BciBaML_.png",h="/web-docs/assets/1720140467554-b5c959c6-b12e-461a-bf45-3b2898aa9221-C3cbVW_F.png",e="/web-docs/assets/1720140467554-b5c959c6-b12e-461a-bf45-3b2898aa9221-C3cbVW_F.png",k="/web-docs/assets/1720226863233-4e44efc5-4592-46d1-9aaa-1d5a995794de-8VsOuwOc.png",s="/web-docs/assets/1720165802024-3bdaa5a8-ff29-4dc6-8939-d5aa6cede5e4-feccx4Gp.png",p="/web-docs/assets/1720165070779-e4d5df36-989b-40c5-8dc8-3b3dc8f224fb-C8tHCXR3.png",r="/web-docs/assets/1720167287059-88ee3857-60a8-4e68-ba50-2ec0f38e6cb0-PqrFBqvn.png",d={},g=t('<h1 id="浏览器跨域" tabindex="-1"><a class="header-anchor" href="#浏览器跨域"><span>浏览器跨域</span></a></h1><h2 id="_1-浏览器的同源策略" tabindex="-1"><a class="header-anchor" href="#_1-浏览器的同源策略"><span>1. 浏览器的同源策略</span></a></h2><h3 id="_1-1-同源策略概述" tabindex="-1"><a class="header-anchor" href="#_1-1-同源策略概述"><span>1.1. 同源策略概述</span></a></h3><p>同源策略是 <strong>浏览器</strong> 为确保 <strong>资源安全</strong>，而遵循的一种策略，该策略对 <strong>访问资源</strong> 进行了一些限制。</p><p><strong>W3C 上对同源策略的说明</strong>：<a href="https://www.w3.org/Security/wiki/Same_Origin_Policy" target="_blank" rel="noopener noreferrer"><strong>Same origin policy</strong></a><strong>。</strong></p><h3 id="_1-2-什么是源-origin" tabindex="-1"><a class="header-anchor" href="#_1-2-什么是源-origin"><span>1.2. 什么是源（origin）？</span></a></h3><p>源的组成部分：</p><p><img src="'+l+'" alt="img"></p><p>下面表格中，只有最后一行的两个源是同源：</p><table><thead><tr><th style="text-align:left;">源 1</th><th>源 2</th><th>是否同源</th></tr></thead><tbody><tr><td style="text-align:left;">http://www.xyz.com/home</td><td>https://www.xyz.com/home</td><td>⛔<strong>非同源️</strong>，协议不同</td></tr><tr><td style="text-align:left;">http://<strong>www</strong>.xyz.com/home</td><td>http://<strong>mail</strong>.xyz.com/home</td><td>⛔<strong>非同源</strong>，域名不同</td></tr><tr><td style="text-align:left;">http://www.xyz.com:<strong>8080</strong>/home</td><td>http://www.xyz.com:<strong>8090</strong>/home</td><td>⛔<strong>非同源</strong>，端口不同</td></tr><tr><td style="text-align:left;">http://www.xyz.com:8080/<strong>home</strong></td><td>http://www.xyz.com:8080/<strong>search</strong></td><td>✅<strong>同 源︎</strong></td></tr></tbody></table><p><strong>同源</strong> 请求：</p><p><img src="'+h+'" alt="img"></p><p><strong>非同源</strong> 请求：</p><p><img src="'+e+`" alt="img"></p><p>总结:<strong>『所处源』<strong>与</strong>『目标源』<strong>不一致，就是 <strong>『非同源』</strong>，又称 <strong>『异源』</strong> 或</strong>『跨域』</strong>。</p><h2 id="_2-跨域会受到哪些限制" tabindex="-1"><a class="header-anchor" href="#_2-跨域会受到哪些限制"><span>2. 跨域会受到哪些限制</span></a></h2><p>例如有两个源：『源A』和『源B』，它们是『非同源』的，那么 <strong>浏览器</strong> 会有如下限制：</p><h3 id="_2-1-限制-dom-访问" tabindex="-1"><a class="header-anchor" href="#_2-1-限制-dom-访问"><span>2.1. 限制 DOM 访问</span></a></h3><p>『源A』的脚本 <strong>不能访问</strong>『源B』的 <code>DOM</code>。每个网页的 <code>DOM</code> 只能由其自己的脚本访问，不能被其他源的脚本操作：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 自己的页面，是同源的 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- &lt;iframe id=&quot;framePage&quot; src=&quot;./demo.html&quot;&gt;&lt;/iframe&gt; --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 百度的页面，非同源的 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">iframe</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;framePage&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;https://www.baidu.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">iframe</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;text/javascript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> showDOM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> framePage</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;framePage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">framePage</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">contentWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 同源的可以获取，非同源的无法获取</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-限制-cookie-访问" tabindex="-1"><a class="header-anchor" href="#_2-2-限制-cookie-访问"><span>2.2. 限制 Cookie 访问</span></a></h3><p>『源A』<strong>不能访问</strong>『源B』的 cookie。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">iframe</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;baidu&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://www.baidu.com&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;500&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;300&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">iframe</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;text/javascript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 访问的是当前源的 cookie，并不是 baidu 的 cookie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：不止是 <code>Cookie</code>，同时也限制了 <code>LocalStorage</code> 和 <code>IndexedDB</code> 等本地存储的访问。</p><h3 id="_2-3-限制-ajax-获取数据" tabindex="-1"><a class="header-anchor" href="#_2-3-限制-ajax-获取数据"><span>2.3. 限制 Ajax 获取数据</span></a></h3><p>『源A』可以给『源B』发请求，但是 <strong>无法获取</strong>『源B』响应的数据。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;https://www.toutiao.com/hot-event/hot-board/?origin=toutiao_pc&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>备注：在上述限制中，浏览器对 <code>Ajax</code> 获取数据的限制是影响最大的一个，且实际开发中经常遇到。</p><h2 id="_3-几个注意点-重要" tabindex="-1"><a class="header-anchor" href="#_3-几个注意点-重要"><span>3. 几个注意点（重要）</span></a></h2><ol><li><strong>跨域限制仅存在浏览器端，服务端不存在跨域限制</strong>。</li><li><strong>即使跨域了，<code>Ajax</code> 请求也可以正常发出，但响应数据不会交给开发者</strong>。</li></ol><p><img src="`+k+'" alt="img"></p><ol><li><code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>...等这些 <strong>标签</strong> 发出的请求也可能跨域，只不过 <strong>浏览器对标签跨域不做严格限制</strong>，对开发几乎无影响。</li></ol><h2 id="_4-cors-解决-ajax-跨域" tabindex="-1"><a class="header-anchor" href="#_4-cors-解决-ajax-跨域"><span>4. CORS 解决 Ajax 跨域</span></a></h2><h3 id="_4-1-cors-概述" tabindex="-1"><a class="header-anchor" href="#_4-1-cors-概述"><span>4.1. CORS 概述</span></a></h3><p><code>CORS</code> 全称：<code>Cross-Origin Resource Sharing</code>（跨域资源共享），是用于控制 <strong>浏览器校验跨域请求</strong> 的一套规范，服务器依照 <code>CORS</code> 规范，<strong>添加特定 <code>响应头</code> 来控制浏览器校验</strong>，大致规则如下：</p><ul><li>服务器明确表示 <strong>拒绝跨域</strong> 请求，或 <strong>没有表示</strong>，则浏览器校验 <strong>不通过</strong>。</li><li>服务器明确表示 <strong>允许跨域</strong> 请求，则浏览器校验 <strong>通过</strong>。</li></ul><p>备注说明：<strong>使用 <code>CORS</code> 解决跨域是最正统的方式</strong>，且要求服务器是 “自己人”。</p><h3 id="_4-2-cors-解决-简单请求-跨域" tabindex="-1"><a class="header-anchor" href="#_4-2-cors-解决-简单请求-跨域"><span>4.2. CORS 解决 <strong>简单请求</strong> 跨域</span></a></h3><p>整体思路：服务器在给出响应时，通过添加 <strong><code>Access-Control-Allow-Origin</code></strong> 响应头，来明确 <strong>表达允许某个源发起跨域请</strong>求，随后浏览器在校验时，直接通过。</p><p><img src="'+s+`" alt="img"></p><p>服务端核心代码（以 <code>express</code> 框架为例）：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 处理跨域中间件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> corsMiddleWare</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 允许 http://127.0.0.1:5500 这个源发起跨域请求</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // res.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;http://127.0.0.1:5500&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 允许所有源发起跨域请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  next</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 配置路由并使用中间件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">corsMiddleWare</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;hello!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-简单请求-与-复杂请求" tabindex="-1"><a class="header-anchor" href="#_4-3-简单请求-与-复杂请求"><span>4.3. 简单请求 与 复杂请求</span></a></h3><p><code>CORS</code> 会把请求分为两类，分别是：<strong>简单请求</strong> 和 <strong>复杂请求</strong>：</p><table border="1"><thead><tr><th scope="col">简单请求</th><th scope="col">复杂请求</th></tr></thead><tbody><tr><td>✅请求方法（method）为：<code>GET</code>、<code>HEAD</code>、<code>POST</code></td><td rowspan="3"> 不是 <strong>简单请求</strong> 的请求，就是 <strong>复杂请求</strong>。 <strong>复杂请求</strong> 会自动发送 <strong>预检请求</strong>。 </td></tr><tr><td> ✅请求头字段要符合 <a href="https://fetch.spec.whatwg.org/#cors-safelisted-request-header">《CORS 安全规范》</a> 简记：只要不手动修改请求头，一般都能符合该规范。 </td></tr><tr><td> ✅请求头的 <code>Content-Type</code> 的值只能是以下三种： <br> 1. <code>text/plain</code><br> 2. <code>multipart/form-data</code><br> 3. <code>application/x-www-form-urlencoded</code></td></tr></tbody></table><p><strong>关于预检请求：</strong></p><ol><li><strong>发送时机</strong>：预检请求在实际 <strong>跨域请求</strong> 之前发出，是由 <strong>浏览器自动发起</strong> 的。</li><li><strong>主要作用</strong>：用于向服务器 <strong>确认</strong> 是否允许接下来的 <strong>跨域请求</strong>。</li><li><strong>基本流程</strong>：先发起 <code>OPTIONS</code> 请求，如果 <strong>通过</strong> 预检，<strong>继续发起</strong> 实际的 <strong>跨域</strong> 请求。</li><li><strong>请求头内容</strong>：一个 <code>OPTIONS</code> 预检请求，通常会包含如下 <strong>请求头</strong>：</li></ol><table><thead><tr><th>请求头</th><th>含义</th></tr></thead><tbody><tr><td><code>Origin</code></td><td>发起请求的源</td></tr><tr><td><code>Access-Control-Request-Method</code></td><td>实际请求的 HTTP 方法</td></tr><tr><td><code>Access-Control-Request-Headers</code></td><td>实际请求中使用的自定义头（如果有的话）</td></tr></tbody></table><h3 id="_4-4-cors-解决-复杂请求-跨域" tabindex="-1"><a class="header-anchor" href="#_4-4-cors-解决-复杂请求-跨域"><span>4.4. CORS 解决 <strong>复杂请求</strong> 跨域</span></a></h3><ol><li><strong>第一步</strong>：服务器先 <strong>通过</strong> 浏览器的 <strong>预检请求</strong>，服务器需要返回如下 <strong>响应头</strong>：</li></ol><table><thead><tr><th>响应头</th><th>含义</th></tr></thead><tbody><tr><td><code>Access-Control-Allow-Origin</code></td><td>允许的源</td></tr><tr><td><code>Access-Control-Allow-Methods</code></td><td>允许的方法</td></tr><tr><td><code>Access-Control-Allow-Headers</code></td><td>允许的自定义头</td></tr><tr><td><code>Access-Control-Max-Age</code></td><td>预检请求的结果缓存时间（可选）</td></tr></tbody></table><p><img src="`+p+'" alt="img"></p><ol start="2"><li><strong>第二步</strong>：处理实际的 <strong>跨域请求</strong>（与处理简单请求跨域的方式相同）</li></ol><p><img src="'+s+`" alt="img"></p><p>服务端核心代码：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 第一步：首先处理预检请求的接口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 预检请求一般是 options 请求方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/students&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 设置允许的跨域请求源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;http://127.0.0.1:5500&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 设置允许的请求方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Access-Control-Allow-Methods&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 设置允许的请求头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Access-Control-Allow-Headers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;school&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 设置预检请求的缓存时间（可选）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Access-Control-Max-Age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">7200</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 发送响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 第二步：处理实际请求的接口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/students&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 设置允许的跨域请求源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;http://127.0.0.1:5500&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 随便设置一个自定义响应头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 设置允许暴露给客户端的响应头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Access-Control-Expose-Headers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 打印请求日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;有人请求/students了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 发送响应数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">students</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-借助-cors-库快速完成配置" tabindex="-1"><a class="header-anchor" href="#_4-5-借助-cors-库快速完成配置"><span>4.5. 借助 cors 库快速完成配置</span></a></h3><p>上述的配置中需要自己配置响应头，或者需要自己手动封装中间件，借助 <code>cors</code> 库，可以更方便完成配置</p><ul><li>安装 <code>cors</code></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>npm i cors</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>简单配置 <code>cors</code></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>app.use(cors())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>完整配置 <code>cors</code></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// cors中间件配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> corsOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  origin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;http://127.0.0.1:5500&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 允许的源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  methods</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;PUT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;DELETE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;HEAD&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;OPTIONS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 允许的方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  allowedHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;school&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 允许的自定义头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  exposedHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 要暴露的响应头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  optionsSuccessStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 预检请求成功的状态码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">cors</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">corsOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 使用 cors 中间件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-jsonp-解决跨域" tabindex="-1"><a class="header-anchor" href="#_5-jsonp-解决跨域"><span>5. JSONP 解决跨域</span></a></h2><ol><li><p><code>JSONP</code> 概述： <code>JSONP</code> 是 <strong>利用了 <code>&lt;script&gt;</code> 标签可以跨域加载脚本，且不受严格限制的特性</strong>，可以说是程序员智慧的结晶，早期一些浏览器不支持 <code>CORS</code> 的时，可以靠 <code>JSONP</code> 解决跨域。</p></li><li><p>基本流程：</p><ul><li><strong>第一步</strong>：客户端创建一个 <code>&lt;script&gt;</code> 标签，并将其 <code>src</code> 属性设置为包含跨域请求的 <code>URL</code>，同时准备一个回调函数，这个回调函数用于处理返回的数据。 <ul><li>首先，前端通过 <code>&lt;script&gt;</code> 标签来发送请求，而 <code>&lt;script&gt;</code> 标签本身是用来请求 <code>js</code> 静态资源的。所以，当服务器返回了请求的响应数据后，前端都会把这些响应的内容当成 <code>js</code> 来执行。</li><li>我们需要在前端准备一个回调函数，然后后端接收到请求后，直接执行我们前端定义好的这个回调函数通过字符串的形式调用并返回就行了。</li></ul></li><li><strong>第二步</strong>：服务端接收到请求后，将数据封装在回调函数中并返回。</li><li><strong>第三步</strong>：客户端的回调函数被调用，数据以参数的形势传入回调函数。</li></ul></li><li><p>图示：</p></li></ol><p><img src="`+r+`" alt="img"></p><ol start="4"><li>代码示例：</li></ol><p>前端：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> onclick</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getTeachers</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;获取数据&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;text/javascript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 回调函数，回调函数用于处理返回的数据。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 切记，回调函数一定要定义在发送请求之前，否则后端返回后执行返回的 js 脚本会找不到该回调函数。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> callback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getTeachers</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 创建 script 元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> script</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;script&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 指定 script 的 src 属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">src</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;http://127.0.0.1:8081/teachers&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 将 script 元素添加到 body 中触发脚本加载</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // script 标签加载完毕后移除该标签</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">      script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/students&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 返回前端定义好的回调函数，并把数据作为参数传递，通过字符串的形式调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;callback({ name: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">张三</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;, age: &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">24</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39; })&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><code>jQuery</code> 封装的 <code>jsonp</code>：</li></ol><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getJSON</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;http://127.0.0.1:8081/teachers?callback=?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-配置代理解决跨域" tabindex="-1"><a class="header-anchor" href="#_6-配置代理解决跨域"><span>6. 配置代理解决跨域</span></a></h2><h2 id="_6-1-自己配置代理服务器" tabindex="-1"><a class="header-anchor" href="#_6-1-自己配置代理服务器"><span>6.1. 自己配置代理服务器</span></a></h2><p>借助 <code>http-proxy-middleware</code> 配置代理，在 <strong>后端</strong> 中配置并使用该中间件：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">createProxyMiddleware</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;http-proxy-middleware&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">createProxyMiddleware</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;https://www.toutiao.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 转发目标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  changeOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 允许跨域</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  pathRewrite</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:{ </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 重写路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &#39;^/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释说明：</p><p>上述代码的含义表示会拦截所有请求中以 <code>/api</code> 开头的请求，然后把拦截的这个请求转发给 <code>target</code> 指定的目标。</p><p><code>pathRewrite</code> 表示转发的时候需要重写路径，这里表示把 <code>/api</code> 设置为空。</p><p>比方说：前端发送了一个请求给后端，请求接口为 <code>http://127.0.0.1:8080/api/getList</code>，后端接收到该请求后会对该请求进行代理转发，转发的真正 <code>api</code> 变成了 <code>http://toutiao.com/getList</code>。</p><h2 id="_6-2-使用-nginx-搭建代理服务器" tabindex="-1"><a class="header-anchor" href="#_6-2-使用-nginx-搭建代理服务器"><span>6.2. 使用 Nginx 搭建代理服务器</span></a></h2><p>参考之前的直播内容</p><h2 id="_6-3-前端借助脚手架搭建服务器" tabindex="-1"><a class="header-anchor" href="#_6-3-前端借助脚手架搭建服务器"><span>6.3. 前端借助脚手架搭建服务器</span></a></h2><p>参考之前的直播内容</p>`,86),o=[g];function c(B,y){return n(),a("div",null,o)}const A=i(d,[["render",c],["__file","index.html.vue"]]),v=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/Browser/%E8%B7%A8%E5%9F%9F/","title":"浏览器跨域","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. 浏览器的同源策略","slug":"_1-浏览器的同源策略","link":"#_1-浏览器的同源策略","children":[{"level":3,"title":"1.1. 同源策略概述","slug":"_1-1-同源策略概述","link":"#_1-1-同源策略概述","children":[]},{"level":3,"title":"1.2. 什么是源（origin）？","slug":"_1-2-什么是源-origin","link":"#_1-2-什么是源-origin","children":[]}]},{"level":2,"title":"2. 跨域会受到哪些限制","slug":"_2-跨域会受到哪些限制","link":"#_2-跨域会受到哪些限制","children":[{"level":3,"title":"2.1. 限制 DOM 访问","slug":"_2-1-限制-dom-访问","link":"#_2-1-限制-dom-访问","children":[]},{"level":3,"title":"2.2. 限制 Cookie 访问","slug":"_2-2-限制-cookie-访问","link":"#_2-2-限制-cookie-访问","children":[]},{"level":3,"title":"2.3. 限制 Ajax 获取数据","slug":"_2-3-限制-ajax-获取数据","link":"#_2-3-限制-ajax-获取数据","children":[]}]},{"level":2,"title":"3. 几个注意点（重要）","slug":"_3-几个注意点-重要","link":"#_3-几个注意点-重要","children":[]},{"level":2,"title":"4. CORS 解决 Ajax 跨域","slug":"_4-cors-解决-ajax-跨域","link":"#_4-cors-解决-ajax-跨域","children":[{"level":3,"title":"4.1. CORS 概述","slug":"_4-1-cors-概述","link":"#_4-1-cors-概述","children":[]},{"level":3,"title":"4.2. CORS 解决 简单请求 跨域","slug":"_4-2-cors-解决-简单请求-跨域","link":"#_4-2-cors-解决-简单请求-跨域","children":[]},{"level":3,"title":"4.3. 简单请求 与 复杂请求","slug":"_4-3-简单请求-与-复杂请求","link":"#_4-3-简单请求-与-复杂请求","children":[]},{"level":3,"title":"4.4. CORS 解决 复杂请求 跨域","slug":"_4-4-cors-解决-复杂请求-跨域","link":"#_4-4-cors-解决-复杂请求-跨域","children":[]},{"level":3,"title":"4.5. 借助 cors 库快速完成配置","slug":"_4-5-借助-cors-库快速完成配置","link":"#_4-5-借助-cors-库快速完成配置","children":[]}]},{"level":2,"title":"5. JSONP 解决跨域","slug":"_5-jsonp-解决跨域","link":"#_5-jsonp-解决跨域","children":[]},{"level":2,"title":"6. 配置代理解决跨域","slug":"_6-配置代理解决跨域","link":"#_6-配置代理解决跨域","children":[]},{"level":2,"title":"6.1. 自己配置代理服务器","slug":"_6-1-自己配置代理服务器","link":"#_6-1-自己配置代理服务器","children":[]},{"level":2,"title":"6.2. 使用 Nginx 搭建代理服务器","slug":"_6-2-使用-nginx-搭建代理服务器","link":"#_6-2-使用-nginx-搭建代理服务器","children":[]},{"level":2,"title":"6.3. 前端借助脚手架搭建服务器","slug":"_6-3-前端借助脚手架搭建服务器","link":"#_6-3-前端借助脚手架搭建服务器","children":[]}],"git":{"createdTime":1720891258000,"updatedTime":1720892266000,"contributors":[{"name":"wr","email":"893634104@qq.com","commits":2}]},"readingTime":{"minutes":8.52,"words":2556},"filePathRelative":"前端/Browser/跨域/README.md","localizedDate":"2024年7月14日","excerpt":"\\n<h2>1. 浏览器的同源策略</h2>\\n<h3>1.1. 同源策略概述</h3>\\n<p>同源策略是 <strong>浏览器</strong> 为确保 <strong>资源安全</strong>，而遵循的一种策略，该策略对 <strong>访问资源</strong> 进行了一些限制。</p>\\n<p><strong>W3C 上对同源策略的说明</strong>：<a href=\\"https://www.w3.org/Security/wiki/Same_Origin_Policy\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>Same origin policy</strong></a><strong>。</strong></p>"}');export{A as comp,v as data};
