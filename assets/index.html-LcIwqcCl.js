import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,b as n}from"./app-DjF3qBm_.js";const l="/web-docs/assets/http%E7%BC%93%E5%AD%9801-DxFEypYi.png",e="/web-docs/assets/http%E7%BC%93%E5%AD%9802-DdZBv12I.png",t="/web-docs/assets/http%E7%BC%93%E5%AD%9803-BMb24wG8.png",h="/web-docs/assets/http%E7%BC%93%E5%AD%9804-CKa8mLzU.png",p={},k=n(`<h1 id="http-缓存" tabindex="-1"><a class="header-anchor" href="#http-缓存"><span>Http 缓存</span></a></h1><p><strong>Http 缓存</strong> 是解决 <strong>Http1.1 协议</strong> 性能问题的一个主要手段。<strong>缓存</strong> 即有可能存在于浏览器中，也可能存在于服务器中。</p><p><strong>Http 缓存</strong> 是一种用于存储 <code>Web</code> 资源副本的机制。当浏览器向服务器请求某个资源时，服务器会返回该资源以及相关的缓存控制信息。</p><p>如果浏览器发现缓存中有该资源的有效副本，就可以直接使用，而无需再次向服务器发送请求。这样可以减少网络流量，提高加载速度，并降低服务器的处理压力。</p><p><strong>Http 缓存</strong> 分为 <strong>强缓存</strong> 和 <strong>协商缓存</strong>。</p><p>注意：<strong>浏览器缓存</strong> 不是 <strong>本地存储</strong>，要分清。</p><h2 id="为什么要有-http-缓存" tabindex="-1"><a class="header-anchor" href="#为什么要有-http-缓存"><span>为什么要有 HTTP 缓存</span></a></h2><p>缓存，顾名思义就是将一些资源保存在本地，后续请求时就可以直接在本地读取，而不用请求服务器。使用 <strong>HTTP 缓存</strong> 是提高性能优化和提升用户体验的关键技术，它主要体现在几个方面：</p><ul><li>减少延迟：当资源被缓存后，用户可以直接从浏览器缓存或更近的网络节点（如 <code>CDN</code>）获取数据，而不必每次都请求原始服务器。网络延迟和数据传输时间都大大缩短了。</li><li>减轻服务器负担：通过缓存常用资源（如 <code>Logo</code>），服务器不必每次都处理相同的请求。</li><li>节约带宽：缓存可以显著减少需要通过网络传输的数据量，降低用户和供应商的流量成本。</li><li>改善用户体验：缓存使得网页、图片等内容的加载更快，从而直接提高了用户的浏览体验。</li><li>离线浏览：<strong>HTTP 缓存</strong> 在一些场景可以让用户在没有网络连接的情况下，仍然能够访问先前加载过的内容。（如网易云音乐可以离线听之前缓存过的歌）。</li><li>负载均衡：通过在多个地理位置缓存内容，避免所有请求都集中在一个服务器上。可以有效处理高流量和大规模分布的用户。</li></ul><h2 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存"><span>强缓存</span></a></h2><p><strong>强缓存</strong> 直接决定了浏览器是否需要向服务器发起请求，只需要 <strong>设置缓存的过期时间</strong>。如果 <strong>强缓存</strong> 有效，浏览器将直接从本地缓存中读取资源，不会与服务器进行任何交互。</p><p>强制缓存的工作原理是通过 <strong>HTTP 响应头</strong> 中的特定字段来控制的。这些字段通常包括 <code>Expires</code> 和 <code>Cache-Control</code>，它们指示了资源的缓存有效时间。</p><p>当浏览器在有效时间内再次请求同一资源时，它会直接从本地缓存中获取该资源，而不会向服务器发送请求。</p><p>需要注意的是，<strong>强缓存</strong> 虽然可以提高性能，但也可能导致一些问题。例如，如果服务器上的资源已经更新，但由于缓存的存在，客户端可能无法获取到最新的资源。</p><p>因此，在设计缓存策略时，需要权衡性能和资源更新的需求。</p><h3 id="expires" tabindex="-1"><a class="header-anchor" href="#expires"><span>Expires</span></a></h3><p>这个响应头在 <strong>Http 1.0</strong> 中提出（如果浏览器不支持 <strong>HTTP1.1</strong>，则用 <code>Expires</code> 判断是否过期），它表示 <strong>资源的过期时间</strong>，即一个 <strong>绝对时间戳</strong>。<strong>浏览器会将该时间与当前时间进行比较，如果当前时间在 <code>Expires</code> 之前，浏览器就会直接从本地缓存中获取资源，而不会再次向服务器发起请求</strong>。但是，<code>Expires</code> 存在一些局限性，例如它受到客户端时间的影响，如果客户端的时间被更改，缓存可能会失效。</p><p>我们用下面的代码以及请求过程来讲述一下 <code>Http 缓存</code> 和 <code>Expires</code>。</p><p>前端代码：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;Http 缓存&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;点击请求&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    import</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;./axios.min.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> fetchData</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> axios</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;http://localhost:9015/api/public/test/getData&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">code</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> contentBox</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;.content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        contentBox</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">innerHTML</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> \`请求结果：</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">JSON</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> btn</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    btn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">      fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端用 <code>Egg</code> 框架编写，这里先不设置 <code>Expires</code> 响应头：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Controller</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;egg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> TestController</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getData</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ctx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">gender</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;男&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 定义一个模拟数据返回给前端</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      code</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;ok&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> TestController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先看一下不设置 <code>Expires</code> <strong>响应头</strong> 时，点击按钮发送请求的情况：</p><p><img src="`+l+`" alt="http缓存01"></p><p>接下来我们在后端中设置请求的响应头，在响应头中设置 <code>Expires</code>：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Controller</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;egg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> TestController</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getData</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ctx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">gender</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;男&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 设置响应头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">      &#39;Expires&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;2024-06-25 16:00:00&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 根据自己业务设置实际的过期时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      code</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;ok&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> TestController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再看一下请求的过程：</p><p><img src="`+e+`" alt="http缓存02"></p><p>可以发现设置了 <code>Expires</code> 响应头后，我们在后续过期时间内连续点击按钮时，拿的是浏览器本地缓存中的数据，并且请求时间也大大缩减。</p><p>但是，<code>Expires</code> 判断强缓存是否过期的机制是：客户端获取本地时间戳，与缓存的资源中的 <code>Expires</code>字段的时间做比较。来判断是否需要对服务器发起请求。</p><p>这里有一个巨大的漏洞：如果本地时间不准确，或者说本地事件与服务器时间误差过大，则会出现该资源将无法被缓存或者资源被永远缓存的情况。</p><p><strong>所以，<code>Expires</code> 字段几乎不被使用了。现在的项目中，我们并不推荐使用 <code>Expires</code>，强缓存功能通常使用 <code>cache-control</code> 字段来代替 <code>Expires</code> 字段。</strong></p><h3 id="cache-control" tabindex="-1"><a class="header-anchor" href="#cache-control"><span>Cache-Control</span></a></h3><p>在 <code>HTTP 1.1</code> 版本中，引入了 <code>Cache-Control</code> 响应头来提供更灵活的缓存控制机制。这个字段可以设置多个指令，包括 <code>max-age</code>、<code>s-maxage</code>、<code>public</code>、<code>private</code>、<code>no-cache</code>、<code>no-store</code> 等。</p><p>其中，<code>max-age</code> 指令表示 <strong>资源</strong> 在 <strong>缓存</strong> 中的 <strong>最大有效时间</strong>，是一个 <strong>相对时间值</strong>，单位是 <code>秒</code>。<strong>表示从服务器第一次返回该资源时开始倒计时，只要在时间范围内的请求就拿缓存中的数据</strong>。</p><p>该方式解决解决了<code>Expires</code> 所存在的巨大漏洞，不用再比对客户端和服务端的时间去判断缓存是否有效了。</p><p>如果同时存在 <code>Expires</code> 和 <code>Cache-Control</code>，<code>Cache-Control</code> 的优先级高于 <code>Expires</code>。</p><p>以下 <code>Cache-Control</code> 的其它属性的含义：</p><ul><li><p><code>s-maxage</code>：决定代理服务器缓存的时长。</p></li><li><p><code>no-cache</code>：这会指示浏览器必须在每次使用网址的缓存版本之前向服务器重新验证。</p></li><li><p><code>no-store</code>：这会指示浏览器和其他中间缓存（如 <code>CDN</code>）绝不存储文件的任何版本。</p></li><li><p><code>private</code>：浏览器可以缓存文件，但中间缓存无法缓存。</p></li><li><p><code>public</code>：任何缓存都可以存储响应。</p></li></ul><h4 id="no-cache-和-no-store" tabindex="-1"><a class="header-anchor" href="#no-cache-和-no-store"><span>no-cache 和 no-store</span></a></h4><p>如果某一资源的 <code>Cache-control</code> 中设置了 <code>no-cache</code>，那么该资源会直接跳过强缓存的校验，直接去服务器进行协商缓存。而 <code>no-store</code> 就是禁止所有的缓存策略了。</p><blockquote><p>注意，<code>no-cache</code> 和 <code>no-store</code> 是一组互斥属性，这两个属性不能同时出现在 <code>Cache-Control</code> 中。</p></blockquote><h4 id="public-和-private" tabindex="-1"><a class="header-anchor" href="#public-和-private"><span>public 和 private</span></a></h4><p>某些情况下，客户端和浏览器的通信中间会出现代理服务器，<code>public</code> 和 <code>private</code> 决定了资源是否可以在代理服务器进行缓存。</p><ul><li><code>public</code> 表示资源在<code>客户端和代理服务器</code>都可以被缓存。</li><li><code>private</code> 则表示资源只能在<code>客户端</code>被缓存，拒绝资源在代理服务器缓存。</li><li>如果这两个属性值都没有被设置，则默认为 <code>private</code>。</li></ul><blockquote><p>注意，<code>public</code> 和 <code>private</code> 也是一组互斥属性。他们两个不能同时出现在响应头的<code>cache-control</code> 字段中。</p></blockquote><h4 id="max-age-和-s-maxage" tabindex="-1"><a class="header-anchor" href="#max-age-和-s-maxage"><span>max-age 和 s-maxage</span></a></h4><ul><li><code>max-age</code> 表示的是资源在 <strong>客户端</strong> 缓存的时长。</li><li><code>s-maxage</code> 表示的是资源在 <strong>代理服务器</strong> 可以缓存的时长。</li></ul><blockquote><p>注意，<strong><code>max-age</code></strong> 和 <strong><code>s-maxage</code></strong> 并不互斥。他们可以一起使用。</p></blockquote><h4 id="cache-control-设置多个值的示例" tabindex="-1"><a class="header-anchor" href="#cache-control-设置多个值的示例"><span>Cache-control 设置多个值的示例</span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">control</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">max</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">maxage</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">200000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">public</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="cache-control-的使用" tabindex="-1"><a class="header-anchor" href="#cache-control-的使用"><span>Cache-control 的使用</span></a></h4><p>我们修改一下之前后端的代码：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Controller</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;egg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> TestController</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getData</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ctx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">gender</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;男&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 设置响应头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">      &#39;Cache-Control&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;max-age=10&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 根据自己业务设置实际的过期时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      code</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;ok&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> TestController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们连续点击按钮查看请求结果：</p><p><img src="`+t+'" alt="http缓存03"></p><p>我们可以看到在距离第一次发起请求的时间范围内，再次发送请求拿的就是缓存数据。而超出时间范围内的请求，就会重新请求服务器。</p><h2 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存"><span>协商缓存</span></a></h2><p><strong>协商缓存</strong> 是 <strong>浏览器</strong> 与 <strong>服务器</strong> 之间的一种 <strong>缓存验证机制</strong>。当浏览器发出资源请求时，如果本地缓存失效或者没有命中强缓存，浏览器会使用协商缓存来与服务器进行 “商量”，判断资源是否更新，进而决定是否使用本地缓存。</p><p><strong>协商缓存</strong> 主要依赖于 <strong>请求头</strong> 中的某些字段和服务器返回的 <strong>响应头</strong> 中的特定字段来进行判断。</p><p>主要的请求头字段有 <code>If-Modified-Since</code> 和 <code>If-None-Match</code>，而主要的响应头字段则有 <code>Last-Modified</code> 和 <code>ETag</code>。</p><p><strong>协商缓存</strong> 的大体流程如下图所示：</p><p><img src="'+h+'" alt="http缓存04"></p><p><strong>协商缓存的目的是确保浏览器能够获取最新的资源，同时避免不必要的数据传输</strong>。这种机制特别适用于那些可能被频繁更新的资源，如在线商城的商品信息、社交媒体的动态等。通过协商缓存，可以在不牺牲内容新鲜度的前提下，提高网站的性能和用户体验。</p><h3 id="方案一-if-none-match-和-etag" tabindex="-1"><a class="header-anchor" href="#方案一-if-none-match-和-etag"><span>方案一：If-None-Match 和 ETag</span></a></h3><p>当浏览器 <strong>第一次</strong> 请求某个资源时，服务器会返回一个 <code>ETag</code>（实体标签），它是一个 <strong>资源版本</strong> 的 <strong>唯一标识符</strong>。浏览器在 <strong>后续请求</strong> 该资源时，会在 <strong>请求头</strong> 中携带 <code>If-None-Match</code> 字段，其值为先前接收到的 <code>ETag</code>。服务器会根据这个值来判断资源是否有更新。如果有更新，服务器会返回新的资源和新的 <code>ETag</code>；如果没有更新，服务器会返回 <code>304 Not Modified</code> 状态码，告诉浏览器可以使用缓存中的资源。</p><h3 id="方案二-if-modified-since-和-last-modified" tabindex="-1"><a class="header-anchor" href="#方案二-if-modified-since-和-last-modified"><span>方案二：If-Modified-Since 和 Last-Modified</span></a></h3><p>类似于 <code>ETag</code> 机制，但 <code>Last-Modified</code> 记录的是 <strong>资源最后修改的时间</strong>。浏览器在后续请求时，会在请求头中携带 <code>If-Modified-Since</code> 字段，其值为先前接收到的 <code>Last-Modified</code> 时间。服务器会检查资源的最后修改时间是否在这个时间之后。</p><p>如果是，说明资源有更新，服务器会返回新资源和新的 <code>Last-Modified</code> 时间；如果不是，服务器同样会返回 <code>304 Not Modified</code> 状态码。</p><h3 id="两种方案的注意事项" tabindex="-1"><a class="header-anchor" href="#两种方案的注意事项"><span>两种方案的注意事项</span></a></h3><p>需要注意的是，如果请求中同时包含了 <code>If-Modified-Since</code> 和 <code>If-None-Match</code> 字段，服务器会优先验证 <code>If-Modified-Since</code> <strong>请求头</strong>，然后再验证<code>If-None-Match</code>。只有当这两个验证都通过时，服务器才会返回 <code>304</code> 状态码，否则将返回新 <strong>的资源</strong> 和 <code>200</code> 状态码。（关于服务器是先验证 <code>If-Modified-Since</code> 还是 <code>If-None-Match</code> 并没有准确的顺序，甚可能只验证其中一个）。</p><p><strong>建议使用 ETag：</strong></p><p><code>ETag</code> 和 <code>Last-Modified</code> 的用途相同：确定浏览器是否需要重新下载已过期的缓存文件。建议使用 <code>ETag</code> 方法，因为它更准确。</p><p><code>Last-Modified</code> 的时间单位是 <strong>秒</strong>，如果某个文件在 <code>1</code>秒内改变了多次，那么他们的 <code>Last-Modified</code> 其实并没有体现出来修改，但是 <code>Etag</code> 每次都会改变确保了精度。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><strong>强缓存</strong> 的适用场景：</p><ul><li><p>资源更新不频繁：当服务器上的 <strong>资源更新不频繁</strong> 时，使用 <strong>强缓存</strong> 是合适的。</p><ul><li>因为强缓存允许浏览器直接使用本地缓存的副本，无需向服务器发起请求，这可以显著提高访问速度和降低服务器压力。</li></ul></li><li><p>对性能要求较高：对于需要快速加载和渲染的页面或资源，使用 <strong>强缓存</strong> 可以显著提高用户体验。</p></li></ul><p><strong>协商缓存</strong> 的适用场景：</p><ul><li><p>当服务器上的 <strong>资源更新较为频繁</strong> 时，使用 <strong>协商缓存</strong> 更为合适。因为 <strong>协商缓存</strong> 会在每次请求时与服务器进行 “商量”，检查资源是否已更新。</p><ul><li>如果资源已更新，服务器会返回新的资源；如果资源未更新，服务器则返回 <code>304</code> 状态码，告诉浏览器继续使用本地缓存。</li></ul></li><li><p>对实时性要求较高：对于需要确保用户始终获取到最新资源的场景，如新闻网站、实时数据展示等，协商缓存可以确保客户端与服务器之间的数据同步。</p></li></ul><p>在实际应用中，通常会根据资源的特性和业务需求来综合选择使用强缓存还是协商缓存，或者结合使用两者以达到最佳的缓存效果。同时，还需要注意缓存过期时间的设置，以避免因缓存过期而导致的问题。</p><p><strong>强缓存</strong> 中，能用 <code>cache-control</code> 就不要用 <code>Expiress</code>。<strong>协商缓存</strong> 中，<code>ETag</code> 并不是 <code>last-modified</code> 的完全替代方案。而是 <code>last-modified</code> 的补充方案，项目中到底是用 <code>ETag</code> 还是<code>last-modified</code> 完全取决于业务场景，这两个没有谁更好谁更坏。</p>',81),d=[k];function r(c,o){return a(),i("div",null,d)}const y=s(p,[["render",r],["__file","index.html.vue"]]),E=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/Browser/Http%E7%BC%93%E5%AD%98/","title":"Http 缓存","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"为什么要有 HTTP 缓存","slug":"为什么要有-http-缓存","link":"#为什么要有-http-缓存","children":[]},{"level":2,"title":"强缓存","slug":"强缓存","link":"#强缓存","children":[{"level":3,"title":"Expires","slug":"expires","link":"#expires","children":[]},{"level":3,"title":"Cache-Control","slug":"cache-control","link":"#cache-control","children":[{"level":4,"title":"no-cache 和 no-store","slug":"no-cache-和-no-store","link":"#no-cache-和-no-store","children":[]},{"level":4,"title":"public 和 private","slug":"public-和-private","link":"#public-和-private","children":[]},{"level":4,"title":"max-age 和 s-maxage","slug":"max-age-和-s-maxage","link":"#max-age-和-s-maxage","children":[]},{"level":4,"title":"Cache-control 设置多个值的示例","slug":"cache-control-设置多个值的示例","link":"#cache-control-设置多个值的示例","children":[]},{"level":4,"title":"Cache-control 的使用","slug":"cache-control-的使用","link":"#cache-control-的使用","children":[]}]}]},{"level":2,"title":"协商缓存","slug":"协商缓存","link":"#协商缓存","children":[{"level":3,"title":"方案一：If-None-Match 和 ETag","slug":"方案一-if-none-match-和-etag","link":"#方案一-if-none-match-和-etag","children":[]},{"level":3,"title":"方案二：If-Modified-Since 和 Last-Modified","slug":"方案二-if-modified-since-和-last-modified","link":"#方案二-if-modified-since-和-last-modified","children":[]},{"level":3,"title":"两种方案的注意事项","slug":"两种方案的注意事项","link":"#两种方案的注意事项","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1720303462000,"updatedTime":1725041412000,"contributors":[{"name":"wr","email":"893634104@qq.com","commits":1}]},"readingTime":{"minutes":11.88,"words":3563},"filePathRelative":"前端/Browser/Http缓存/README.md","localizedDate":"2024年7月7日","excerpt":"\\n<p><strong>Http 缓存</strong> 是解决 <strong>Http1.1 协议</strong> 性能问题的一个主要手段。<strong>缓存</strong> 即有可能存在于浏览器中，也可能存在于服务器中。</p>\\n<p><strong>Http 缓存</strong> 是一种用于存储 <code>Web</code> 资源副本的机制。当浏览器向服务器请求某个资源时，服务器会返回该资源以及相关的缓存控制信息。</p>\\n<p>如果浏览器发现缓存中有该资源的有效副本，就可以直接使用，而无需再次向服务器发送请求。这样可以减少网络流量，提高加载速度，并降低服务器的处理压力。</p>"}');export{y as comp,E as data};
