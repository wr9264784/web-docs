import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,b as e}from"./app-Bgb0RMc4.js";const l="/web-docs/assets/Timing-CllexsNL.png",i="/web-docs/assets/performance.timing-BKRr0o6I.png",t="/web-docs/assets/performance.getEntries()-DvEHEjU5.png",h="/web-docs/assets/performance.getEntriesByName()-L34Q-I5U.png",k="/web-docs/assets/%E4%BC%98%E5%8C%96-zHpotrJy.png",p="/web-docs/assets/lighthouse-CBRussfN.png",d="/web-docs/assets/%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87-B5yuTBHy.png",r={},c=e('<h1 id="网页性能指标及影响因素" tabindex="-1"><a class="header-anchor" href="#网页性能指标及影响因素"><span>网页性能指标及影响因素</span></a></h1><h2 id="timing" tabindex="-1"><a class="header-anchor" href="#timing"><span>Timing</span></a></h2><p>页面运行的 <strong>时间栈</strong>（统计了浏览器从网址开始导航到 <code>window.onload</code> 事件触发的一系列关键的时间点），如下图所示：</p><p><img src="'+l+'" alt="Timing"></p><ol><li><p>第一个流程 <code>Prompt of unload</code>：可以认为要加载新的页面，是浏览器里的事件，我们也不太能在这里做一些性能优化。但是往往会有一些事件。</p><ul><li><code>startTime</code>：可以认为是你输入 <code>url</code> 地址点击回车那一瞬间的时间。</li><li><code>unloadEventStart</code> 和 <code>unloadEventEnd</code>：相当于是这个阶段开始和结束对应的时刻。</li><li>可以不用关注这一部分，重要的是黄色部分到后面。</li></ul></li><li><p><code>Redirect</code>：一般来说，我们输入一些 <code>url</code> 的时候，它有可能会存在一些 <code>301</code> 或 <code>302</code> 的重定向。一般用于这个网页的地址发生了变化，但是由于外链正在访问这个地址，那么它就需要一个 <code>Redirect</code>。还有一个就是 <code>https</code>，如果用户输入的是 <code>http</code>，就需要把用户输入的地址 <code>Redirect</code> 到 <code>https</code> 对应的地址。</p></li><li><p><code>AppCache</code>：我们在做 <code>http</code> 请求的时候，它会允许我们的资源缓存在浏览器中，这也是一个很关键的性能优化。</p></li><li><p><code>NDS</code>：假如说现在有一个流程，之前并没有保存过，浏览器中并没有对应的资源缓存，我们就需要去发起网络请求。在发起网络请求之前，我们知道 <code>http</code> 是一个高层协议（网络的通信模型，一般是 <code>5</code> 层架构，<code>http</code> 属于 <strong>应用层</strong>，也就是最顶层的协议），对于整个网络通信的模型来说，想要通过 <code>http</code> 协议和服务端进行交互，去加载一些资源。首先就要进行 <code>DNS</code>。<code>DNS</code> 就是一个 <strong>域名</strong> 到 <code>IP</code> 地址的映射。</p><ul><li>比如说，我们输入 <code>www.baidu.com</code>，输入的这个叫域名，浏览器最后实际上是发出请求的时候，必须要发到一个 <code>IP</code> 地址上。</li><li>从前端的角度来说 <code>DNS</code> 也是不太好优化的。</li></ul></li><li><p><code>TCP</code>：指的是 <code>TCP</code> 的 <strong>三次握手</strong> 的过程。</p></li><li><p><code>Request</code>：浏览器发起的请求时间。</p></li><li><p><code>Response</code>：服务端的响应时间。</p></li><li><p><code>Processing</code>：浏览器处理服务器返回的数据的时间。</p></li><li><p><code>Load</code>：页面加载的时间。</p></li></ol><h2 id="performance-api" tabindex="-1"><a class="header-anchor" href="#performance-api"><span>Performance API</span></a></h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance_API" target="_blank" rel="noopener noreferrer">Performance API</a> 是一组用于衡量 <code>web</code> 应用性能的标准接口。</p><p>我们可以打开浏览器控制台，输入 <strong><code>performance</code></strong>，查看该对象下的属性。</p></blockquote><h3 id="常用的-performance-api" tabindex="-1"><a class="header-anchor" href="#常用的-performance-api"><span>常用的 Performance API</span></a></h3><ul><li><p><code>performance.timing</code> 可以获取网页运行过程中每个时间点对应的时间戳（<strong>绝对时间</strong>，ms），但却即将废弃：</p><p><img src="'+i+'" alt="performance.timing"></p></li><li><p><code>performance.getEntries()</code>，以对象数组的方式返回所有资源的数据，包括 <code>css</code>、<code>img</code>、<code>script</code>、<code>xmlHttpRequest</code>、<code>link</code> 等，这个 <code>API</code> 方法获取的资源的请求的时间是相对于点击回车的时间：</p><p><img src="'+t+'" alt="performance.getEntries()"></p></li><li><p><code>performance.getEntriesByType(type: string)</code>：和上面的 <code>getEntries</code> 方法类似，不过是多了一层类型的筛选，常见性能类型可以有 <code>navigation</code>（页面导航）、<code>resource</code>（资源加载）、<code>paint</code>（绘制指标）等。</p></li><li><p><code>performance.getEntriesByName(name: string, type: ?string)</code>：和上面的 <code>getEntries</code> 方法类似，多了一层名字的筛选，也可以传第二个参数再加一层类型的筛选。这里的 <code>name</code> 是资源路径。</p><p><img src="'+h+'" alt="performance.getEntriesByName()"></p></li><li><p><code>performance.now()</code>：返回当前时间与 <code>performance.timing.navigationStart</code> 的时间差。</p><p><img src="'+i+`" alt="performance.timing"></p><ul><li><p><code>PerformanceObserver</code>（<strong>观察者模式</strong>）：<strong>推荐，主要用于检测性能度量事件</strong>：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 观察的性能事件被记录时将调用 PerformanceObserverCallback 回调</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 回调函数其第一个参数是 性能观察条目列表，第二个参数是 观察者 对象。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> entries</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> entries</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 处理 &quot;longtask&quot; 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 调用 observer 示例对象的 observe 方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 指定监测的 entry types 的集合，当 performance entry 被记录并且是指定的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// entryTypes 之一的时候，性能观察者对象的回调函数会被调用。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 这里监测长任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">observer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">entryTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;longtask&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 模拟一个长任务，超过 50ms 就已经是长任务了</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> startTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> startTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>entryTypes</code> 具体每个特性类型的含义：</p><table><thead><tr><th>entryTypes</th><th>含义</th></tr></thead><tbody><tr><td>element</td><td>元素加载时间，实例项是 <code>PerformanceElementTiming</code> 对象。</td></tr><tr><td>event</td><td>事件延迟，实例项是 <code>PerformanceEventTiming</code> 对象。</td></tr><tr><td>first-input</td><td>用户第一次与网站交互（即点击链接、点击按钮或使用自定义的 <code>JavaScript</code> 控件时）到浏览器实际能够响应交互的时间，称之为 <code>First input delay</code> —— 简称 <code>FID</code>。</td></tr><tr><td>largest-contentful-paint</td><td>屏幕上触发的最大绘制元素，实例项是 <code>LargestContentfulPaint</code> 对象。</td></tr><tr><td>layout-shift</td><td>元素移动时候的布局稳定性，实例项是 <code>LayoutShift</code> 对象。</td></tr><tr><td>long-animation-frame</td><td>长动画关键帧。</td></tr><tr><td>longtask</td><td>长任务实例，归属于 <code>PerformanceLongTaskTiming</code> 对象。</td></tr><tr><td>mark</td><td>用户自定义的性能标记，实例项是 <code>PerformanceMark</code> 对象。</td></tr><tr><td>measure</td><td>用户自定义的性能测量。实例项是 <code>PerformanceMeasure</code> 对象。</td></tr><tr><td>navigation</td><td>页面导航出去的时间，实例项是 <code>PerformancePaintTiming</code> 对象。</td></tr><tr><td>paint</td><td>页面加载时内容渲染的关键时刻（第一次绘制，第一次有内容的绘制），实例项是 <code>PerformancePaintTiming</code> 对象。</td></tr><tr><td>resource</td><td>页面中资源的加载时间信息，实例项是 <code>PerformanceResourceTiming</code> 对象。</td></tr><tr><td>visibility-state</td><td>页面可见性状态更改的时间，即选项卡何时从前台更改为后台，反之亦然。实例项是 <code>VisibilityStateEntry</code> 对象。</td></tr><tr><td>soft-navigation</td><td>-</td></tr></tbody></table></li></ul></li></ul><h2 id="用户为导向性能指标介绍" tabindex="-1"><a class="header-anchor" href="#用户为导向性能指标介绍"><span>用户为导向性能指标介绍</span></a></h2><p>性能优化其实要优化的东西就 4 个：</p><ol><li><strong>First Paint（FP）/ First Contentful Paint（FCP）</strong>：<strong>首次绘制</strong>（<code>First Paint</code>）和 <strong>首次内容绘制</strong>（<code>First Contentful Paint</code>）。</li><li><strong>First Meaningful Paint（FMP）</strong>：<strong>首次有效绘制</strong>。 <ul><li>很多时候，我们的第一次 <code>FP</code> 它可能没有什么用，这是什么意思是呢？一般来说，比如我们去写一个 <code>React</code> 项目的时候，我们会默认使用 <code>CSR</code>，也就是客户端渲染。</li><li>客户端渲染有什么特点呢？就是当我们用浏览器第一次去访问我们这个链接的时候，这个链接它会返回一段 <code>html</code>，但是这段 <code>html</code> 没什么用。因为它是一个空的模板页面，<code>App</code> 这个 <code>div</code> 是一个空的标签，但是实际上我们的项目中 <code>App</code> 这个标签下是有很多内容的。</li><li>也就是说我们的 <code>FP</code> 有可能做的很好，但是 <code>FMP</code> 可能会做的不好。</li></ul></li><li><strong>Time to Interactive（TTI）</strong>：<strong>可交互时间</strong>。 <ul><li>我们的网站页面往往是先搭建出一个架子，然后再加载具体内容，然后等到具体内容都加载好了，用户才能够和页面进行交互。</li><li>一般来说，<strong>首屏有效绘制时间</strong> 和 <strong>可交互时间</strong> 可以稍微晚一点，因为绝大多数用户刚看到页面的时候并不会马上跟我们的页面产生交互。</li><li>所以，<code>TTI</code> 可以比 <code>FCP</code> 和 <code>FMP</code> 的时间稍微长一点。</li></ul></li><li><strong>Long Tasks</strong>：<strong>长任务时间</strong>。</li></ol><p>具体如下图所示：</p><p><img src="`+k+`" alt="优化"></p><h3 id="首次绘制-first-paint-和-首次内容绘制-first-contentful-paint" tabindex="-1"><a class="header-anchor" href="#首次绘制-first-paint-和-首次内容绘制-first-contentful-paint"><span>首次绘制（First Paint）和 首次内容绘制（First Contentful Paint）</span></a></h3><p>**首次绘制（FP）**和 <strong>首次内容绘制（FCP）</strong>，在浏览器导航并渲染出像素点后，这些性能指标点立即被标记。这些点对于用户而言十分重要，直呼感官体验。</p><p><strong>首次绘制（FP）</strong>，首次渲染的时间点。FP 和 FCP 有点像，但是 FP 一定先于 FCP 发生，例如一个页面加载时，第一个 DOM 还没有绘制完成，但是可能这时页面的背景颜色已经出来了。这时 FP 指标就被记录下来了。而 FCP 会在页面绘制完成第一个 DOM 内容后记录。</p><p><strong>首次内容绘制（FCP）</strong>，首次内容绘制的时间，指页面从开始加载到页面内容的任何部分在屏幕上完成渲染的时间。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="首次有效绘制-first-meaningful-paint" tabindex="-1"><a class="header-anchor" href="#首次有效绘制-first-meaningful-paint"><span>首次有效绘制（First MeanIngful Paint）</span></a></h3><p>有效内容，这种一般很难清晰地界定哪些元素的加载是「有用」的（一次目前尚无规范），但是对于开发者而言，他们更知道页面的哪些部分对于用户而言是最为有用的，所以这样的衡量标准更多时候是掌握在开发者手上。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 监测的资源加载内容可以是图片、某个 Dom 元素等等</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> entries</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  entries</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;https://xxx.xx.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">observer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">entryTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;resource&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可交互时间-tti" tabindex="-1"><a class="header-anchor" href="#可交互时间-tti"><span>可交互时间（TTI)</span></a></h3><p>指标测量页面从开始加载（FCP）到主要子资源完成渲染，并能够快速、可靠地响应用户输入所需的时间。阻塞会影响正常可交互时间，浏览器 <strong>主线程一次只能处理一个任务</strong>，如果主线程长时间被占用，那么可交互时间也会变长，所以 <strong>更多的 <code>TTI</code> 都是发生在主线程处于空闲的时间点</strong>。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">performance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">timing</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">domInteractive</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 可交互时间点</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>良好的 <code>TTI</code> 应该控制在 <code>5s</code> 以内。测量 <code>TTI</code> 的最佳方法就是浏览器控制台上，点击 <code>Lighthouse</code> 标签，运行性能审核。</p><p><img src="`+p+`" alt="lighthouse"></p><h3 id="长任务-long-task" tabindex="-1"><a class="header-anchor" href="#长任务-long-task"><span>长任务（Long Task）</span></a></h3><p>浏览器 <strong>主线程一次只能处理一个任务</strong>。某些情况下，一些任务将可能会花费很长的时间来执行，持续占用主进程资源，如果这种情况发生了，主线程阻塞，剩下的任务只能在队列中等待。</p><p>用户所感知到的可能是输入的延迟，或者是哐当一下全部出现。这些都是当今网页糟糕体验的主要来源之一。</p><p><code>Long Tasks API</code> 认为任何超过 <code>50ms</code> 的任务都可能存在潜在问题。并将这些任务相关信息回调给前端。</p><p>把 <code>long task</code> 时间定义为 <code>50ms</code> 的主要理论依据是 Chrome 提出的 RAIL 模型，RAIL 模型认为事件响应应该在 <code>100ms</code> 以内，滚动和动画处理应该在 <code>16ms</code> 以内，才能保证好的用户体验，而如果一个 <code>task</code> 执行超过 <code>50ms</code>，则很有可能让体验达不到 RAIL 的标准，故我们需要重点关注执行时间超过 <code>50ms</code> 的任务。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 监测的资源加载内容可以是图片、某个 Dom 元素等等</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> entries</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  entries</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;长任务：&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">observer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">entryTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;longtask&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浏览器的-performance-标签" tabindex="-1"><a class="header-anchor" href="#浏览器的-performance-标签"><span>浏览器的 Performance 标签</span></a></h2><p>对于上述的 4 个性能指标，其实都可以通过浏览器的 <code>Performance</code> 标签进行观察，例如下图中，监测 vue 官网的性能指标：</p><p>![浏览器 performance](assets/浏览器 performance.png)</p><h2 id="核心网页指标" tabindex="-1"><a class="header-anchor" href="#核心网页指标"><span>核心网页指标</span></a></h2><p>除了上述的 4 个性能指标，还有哪些是我们用户比较关注的点？其实就是下图中的三个：</p><p><img src="`+d+`" alt="网页性能指标"></p><ul><li><p><strong>Largest Contentful Paint（LCP）</strong>：最大内容绘制，用于衡量加载性能。为了提供良好的用户体验，<code>LCP</code> 应在网页首次开始加载后的 <code>2.5s</code> 内发生。</p><ul><li>很多时候我们很难判断网站中哪些东西是最重要的，或者说哪些东西的成本比较高，比如我们要看一批网站的性能，很多时候我们就不能说每个网站都要去查一遍，看一下哪个东西加载出来才是好的。</li><li>那么有没有统一的标注呢？答案是有的，就是我们需要去看一下这个网站中最大的一个元素，它渲染出来的时间。</li><li>所以，google 就提出来一个叫做 <code>LCP</code> 的概念。</li></ul></li><li><p><strong>First Input Delay（FID）</strong>：首次输入延迟，用于衡量可交互性。为了提供良好的用户体验，页面的 <code>FID</code> 应不超过 <code>100 ms</code>。</p></li><li><p><strong>Cumulative Layout Shift（CLS）</strong>：累计布局偏移，用于衡量视觉稳定性。为了提供良好的用户体验，页面保持 <code>0.1</code> 或更低的 <code>CLS</code>。</p><ul><li>假如网页中网速比较慢的时候，某个元素它一开始的时候在某个位置。但是当页面加载完成后这个元素可能会变换到了另一个位置。</li><li>因为整个网页的加载过程中，可能会因为一些图片的加载，或者是因为一些 css 是后面才加载。所以，造成了一开始的布局是不对的，然后需要重新布局。</li><li>所以，我们希望这样的元素越少越好，衡量的指标就是 <code>CLS</code>。</li></ul></li></ul><h2 id="浏览器的-lighthouse-标签-——-知名测评工具" tabindex="-1"><a class="header-anchor" href="#浏览器的-lighthouse-标签-——-知名测评工具"><span>浏览器的 Lighthouse 标签 —— 知名测评工具</span></a></h2><p>对于上述的三个核心网页指标，也是可以通过浏览器的 Lighthouse 标签的工具，进行监测查看的，如下图所示：</p><p>![浏览器 lighthouse](assets/浏览器 lighthouse.png)</p><p>测试完成后的结果会如下图所示：</p><p>![lighthouse 测试结果](assets/lighthouse 测试结果.png)</p><h2 id="常见的优化手段" tabindex="-1"><a class="header-anchor" href="#常见的优化手段"><span>常见的优化手段</span></a></h2><h3 id="异步加载" tabindex="-1"><a class="header-anchor" href="#异步加载"><span>异步加载</span></a></h3><p>说起 <strong>异步加载</strong>，我们需要先了解一下什么是 <strong>同步加载</strong>，在 <code>html</code> 文件中：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 默认就是同步加载 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://abc.com/script.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>同步加载</strong>：同步模式又称为 <strong>阻塞模式</strong>，会阻止浏览器的后续处理，停止了后续的文件的解析、执行，如图像的渲染。浏览器之所以会采用同步模式，是因为加载的 <code>js</code> 文件中有对 <code>dom</code> 的操作、重定型、输出 <code>document</code> 等默认行为，所以同步才是最安全的。</li><li><strong>异步加载</strong>：其实就是一种 <strong>非阻塞加载模式</strong> 的方式，就是浏览器在下载执行 <code>js</code> 的同时，还会继续进行后续页面的处理。</li></ul><p>几种常见的 <strong>异步加载</strong> 脚本的方式：</p><ul><li><code>async</code> 和 <code>defer。</code></li><li>动态添加 <code>script</code> 标签。</li><li>通过 <code>XHR</code> 异步加载 <code>js</code>。</li></ul><h4 id="async-和-defer" tabindex="-1"><a class="header-anchor" href="#async-和-defer"><span>async 和 defer</span></a></h4><p>在 <code>JavaScript</code> 脚本增加 <code>async</code> 或 <code>defer</code> 属性：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">// 面试经常问：script 标签的 async 和 defer 的区别？</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- async 异步加载脚本后便会执行脚本 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;./main.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- defer 需要等到 html 解析完成之后才会执行脚本 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;./main.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> defer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动态添加-script-标签" tabindex="-1"><a class="header-anchor" href="#动态添加-script-标签"><span>动态添加 script 标签</span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// js 代码种动态添加 script 标签，并将其插入页面</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> script</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;script&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">src</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;./index.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通过-xhr-异步加载-js" tabindex="-1"><a class="header-anchor" href="#通过-xhr-异步加载-js"><span>通过 XHR 异步加载 js</span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> xhr</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// true 代表我们需要异步加载该插件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/getUser&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 自定义 header</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;testHeader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 参数为请求体发送的数据，为必填项，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 当不需要发送数据时，使用 null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">onreadyStateChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">readystate</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 304</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 300</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;成功，result：&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">responseText</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;错误，errCode：&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="按需打包与按需加载" tabindex="-1"><a class="header-anchor" href="#按需打包与按需加载"><span>按需打包与按需加载</span></a></h3><p>随着 <code>webpack</code> 等构建工具的能力越来越强，开发者在构建阶段可以随心所欲地打造项目流程，与此同时按需加载和按需打包的技术曝光度也越来越高，甚至决定着工程化构建的结果，直接影响应用的性能优化。</p><ul><li>按需打包：表示的是针对第三方依赖库及业务模块，只打包真正在运行时可能会用到的代码。</li><li>按需加载：表示的是代码模块在交互的时候需要动态引入。</li></ul><h4 id="按需打包" tabindex="-1"><a class="header-anchor" href="#按需打包"><span>按需打包</span></a></h4><p>按需打包一般通过两种方式来实现：</p><ol><li><p>使用 <code>ES Module</code> 支持的 <code>Tree Shaking</code> 方案，使用构建工具的时候完成按需打包。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;antd&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>假设我们的业务使用了 <code>Button</code> 组件，同时该组件库没有提供 <code>ES Module</code> 版本，那么这样的引用会导致最终打包的代码是所有 <code>antd</code> 导出的内容，这样会大大增加代码的体积。</p></li><li><p>但是，如果我们组件库提供了 <code>ES Module</code> 版本（静态分析能力），并且开启了 <code>Tree Shaking</code> 功能，那么我们就可以通过 <strong>摇树</strong> 特性，将不会被使用的代码在构建阶段移除。</p></li><li><p>正确使用 <code>Tree Shaking</code> ：</p><p>例如 <code>antd</code> 组件库：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// package.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 省略其他...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 暴露 CommonJS 规范代码 lib/index.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">	&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 非 package.json 标准字段，打包工具专用字段，指定符合 ESM 规范的入口文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">	&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;es/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 副作用配置字段，告诉打包工具遇到 sideEffects 匹配到的资源，均为无副作用的模块</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">    &quot;sideEffects&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">        &quot;.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">        &quot;expample.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>什么是副作用模块？</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// expample.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目：</p><p><code>Tree Shaking</code> 一般与 <code>Babel</code> 搭配使用，需要在项目里面配置 <code>Babel</code>，因为 <code>Babel</code> 默认会把 <code>ESM</code> 规范打包成 <code>CommonJS</code> 代码，所以需要通过配置 <code>babel-preset-env</code> 编译降级：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">production</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">    presetes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">        &#39;@babel/preset-env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">            modules</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>webpack4.0</code> 以上在 <code>modle</code> 为 <code>production</code> 的时候会自动开启 <code>Tree Shaking</code>，实际就是依赖了 <code>UglifyJS</code> 等压缩插件，默认配置：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    optimization</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        usedExports</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 使用 usedExports 进行标记</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        minimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            new </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">TerserPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({ ... }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 支持删除未引用代码的压缩器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>使用以 <code>bbel-plugin-import</code> 为主的 <code>Babel</code> 插件按需打包：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		libraryName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;antd&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		libraryDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;lib&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// default: lib</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        style</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		libraryName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;antd&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">TimePicker</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;antd&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">变成了以下形式</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">：↓↓↓↓↓↓↓</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> _button</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;antd/lib/time-picker&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="按需引入" tabindex="-1"><a class="header-anchor" href="#按需引入"><span>按需引入</span></a></h4><p>如何才能动态地按需导入模块呢？动态导入 <code>import(module)</code> 方法加载模块并返回一个 <code>Promise</code>，该 <code>Promise resolve</code> 为一个包含其所有导出的模块对象，我们 <strong>可以在代码中的任意位置调用这个表达式</strong>。</p><p>不兼容浏览器，可以用 <code>Babel</code> 转换（<code>@babel/plugin-syntax-dynamic-import</code>）。</p><p>例如有以下的 <code>/src/utis/a.js</code> 模块内容：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// a.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    consolog</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;a 模块被调用&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们在 <code>vue</code> 的 <code>app</code> 根页面中使用：</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" data-title="vue" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">el-button</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">importHandle</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;点击&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">el-button</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 当用户点击按钮时，才会加载对应的 js 模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> importHandle</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;@/utils/a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>性能优化的思路：</p><ol><li><p>首先打开浏览器的控制查看一下 JS 的加载情况，对于哪些加载特别大的 JS，我们可以安装一下第三方的依赖库，帮我们去分析一下我们项目中都引入了哪些东西，这个依赖包是：<code>webpack-bundle-analyzer</code>，它可以直观地告诉我们引入了哪些东西，包括每一个的大小。</p></li><li><p>项目中用到的依赖包，比如说第三方组件库、时间日期处理的依赖包、富文本包等这些东西我们是可以不进行打包的，以外部链接的方式引入。在以外链的形式也就是 <code>link</code> 标签引入时，我们还可以指定 <code>ref=&quot;preload&quot;</code> 属性</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;prefetch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">link</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>这段代码告诉浏览器，这段资源将会在未来某个导航或者功能要用到，但是本资源的下载顺序权重比较低。也就是说 <code>prefetch</code> 通常用于加速下一次导航，而不是本次的。被标记为 <code>prefetch</code> 的资源，将会被浏览器在空闲时间加载。</p></li><li><p>还有就是像 Excel 的导入导出功能，一般都会引入第三方的库，像这些功能我们一进入首页的时候没有必要加载它，可以等我真正需要的时候再去加载，这里就可以用 <code>es6</code> 的 <strong>动态加载</strong> 去解决，这样的话也能减少我们不要的资源的浪费，减少阻塞我们页面的渲染。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> moduleSpecifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;./utils.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 动态加载，可以当我们点击某个导入导出按钮的时候，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 才去动态加载对应的依赖或对应的文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">moduleSpectifier</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="vue-性能优化常见策略" tabindex="-1"><a class="header-anchor" href="#vue-性能优化常见策略"><span>Vue 性能优化常见策略</span></a></h2><p><code>vue</code> 的性能优化相关的点没有 <code>react</code> 的多，其实 <code>react</code> 性能优化的话可以做的事情更多一些，所以一般来说大厂更倾向于用 <code>react</code>，因为相当于能够做更极致的优化。</p><ul><li><p>路由懒加载。</p></li><li><p>使用 <code>keep-alive</code> 缓存页面。</p></li><li><p>使用 <code>v-show</code> 复用 <code>DOM</code>，避免重复创建组件。</p></li><li><p>不再变化的数据使用 <code>v-once</code>。</p></li><li><p>长列表性能优化，如果是长列表可采用虚拟滚动。</p></li><li><p>图片懒加载。</p></li><li><p>第三方按需引入。</p></li><li><p>服务端渲染：SSR/SSG。</p></li></ul>`,77),o=[c];function g(B,y){return n(),a("div",null,o)}const v=s(r,[["render",g],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/","title":"网页性能指标及影响因素","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Timing","slug":"timing","link":"#timing","children":[]},{"level":2,"title":"Performance API","slug":"performance-api","link":"#performance-api","children":[{"level":3,"title":"常用的 Performance API","slug":"常用的-performance-api","link":"#常用的-performance-api","children":[]}]},{"level":2,"title":"用户为导向性能指标介绍","slug":"用户为导向性能指标介绍","link":"#用户为导向性能指标介绍","children":[{"level":3,"title":"首次绘制（First Paint）和 首次内容绘制（First Contentful Paint）","slug":"首次绘制-first-paint-和-首次内容绘制-first-contentful-paint","link":"#首次绘制-first-paint-和-首次内容绘制-first-contentful-paint","children":[]},{"level":3,"title":"首次有效绘制（First MeanIngful Paint）","slug":"首次有效绘制-first-meaningful-paint","link":"#首次有效绘制-first-meaningful-paint","children":[]},{"level":3,"title":"可交互时间（TTI)","slug":"可交互时间-tti","link":"#可交互时间-tti","children":[]},{"level":3,"title":"长任务（Long Task）","slug":"长任务-long-task","link":"#长任务-long-task","children":[]}]},{"level":2,"title":"浏览器的 Performance 标签","slug":"浏览器的-performance-标签","link":"#浏览器的-performance-标签","children":[]},{"level":2,"title":"核心网页指标","slug":"核心网页指标","link":"#核心网页指标","children":[]},{"level":2,"title":"浏览器的 Lighthouse 标签 —— 知名测评工具","slug":"浏览器的-lighthouse-标签-——-知名测评工具","link":"#浏览器的-lighthouse-标签-——-知名测评工具","children":[]},{"level":2,"title":"常见的优化手段","slug":"常见的优化手段","link":"#常见的优化手段","children":[{"level":3,"title":"异步加载","slug":"异步加载","link":"#异步加载","children":[{"level":4,"title":"async 和 defer","slug":"async-和-defer","link":"#async-和-defer","children":[]},{"level":4,"title":"动态添加 script 标签","slug":"动态添加-script-标签","link":"#动态添加-script-标签","children":[]},{"level":4,"title":"通过 XHR 异步加载 js","slug":"通过-xhr-异步加载-js","link":"#通过-xhr-异步加载-js","children":[]}]},{"level":3,"title":"按需打包与按需加载","slug":"按需打包与按需加载","link":"#按需打包与按需加载","children":[{"level":4,"title":"按需打包","slug":"按需打包","link":"#按需打包","children":[]},{"level":4,"title":"按需引入","slug":"按需引入","link":"#按需引入","children":[]}]}]},{"level":2,"title":"Vue 性能优化常见策略","slug":"vue-性能优化常见策略","link":"#vue-性能优化常见策略","children":[]}],"git":{"createdTime":1724532946000,"updatedTime":1724532946000,"contributors":[{"name":"wr","email":"893634104@qq.com","commits":1}]},"readingTime":{"minutes":16.78,"words":5033},"filePathRelative":"前端/性能优化/性能指标/README.md","localizedDate":"2024年8月25日","excerpt":"\\n<h2>Timing</h2>\\n<p>页面运行的 <strong>时间栈</strong>（统计了浏览器从网址开始导航到 <code>window.onload</code> 事件触发的一系列关键的时间点），如下图所示：</p>\\n<p></p>\\n<ol>\\n<li>\\n<p>第一个流程 <code>Prompt of unload</code>：可以认为要加载新的页面，是浏览器里的事件，我们也不太能在这里做一些性能优化。但是往往会有一些事件。</p>\\n<ul>\\n<li><code>startTime</code>：可以认为是你输入 <code>url</code> 地址点击回车那一瞬间的时间。</li>\\n<li><code>unloadEventStart</code> 和 <code>unloadEventEnd</code>：相当于是这个阶段开始和结束对应的时刻。</li>\\n<li>可以不用关注这一部分，重要的是黄色部分到后面。</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>Redirect</code>：一般来说，我们输入一些 <code>url</code> 的时候，它有可能会存在一些 <code>301</code> 或 <code>302</code> 的重定向。一般用于这个网页的地址发生了变化，但是由于外链正在访问这个地址，那么它就需要一个 <code>Redirect</code>。还有一个就是 <code>https</code>，如果用户输入的是 <code>http</code>，就需要把用户输入的地址 <code>Redirect</code> 到 <code>https</code> 对应的地址。</p>\\n</li>\\n<li>\\n<p><code>AppCache</code>：我们在做 <code>http</code> 请求的时候，它会允许我们的资源缓存在浏览器中，这也是一个很关键的性能优化。</p>\\n</li>\\n<li>\\n<p><code>NDS</code>：假如说现在有一个流程，之前并没有保存过，浏览器中并没有对应的资源缓存，我们就需要去发起网络请求。在发起网络请求之前，我们知道 <code>http</code> 是一个高层协议（网络的通信模型，一般是 <code>5</code> 层架构，<code>http</code> 属于 <strong>应用层</strong>，也就是最顶层的协议），对于整个网络通信的模型来说，想要通过 <code>http</code> 协议和服务端进行交互，去加载一些资源。首先就要进行 <code>DNS</code>。<code>DNS</code> 就是一个 <strong>域名</strong> 到 <code>IP</code> 地址的映射。</p>\\n<ul>\\n<li>比如说，我们输入 <code>www.baidu.com</code>，输入的这个叫域名，浏览器最后实际上是发出请求的时候，必须要发到一个 <code>IP</code> 地址上。</li>\\n<li>从前端的角度来说 <code>DNS</code> 也是不太好优化的。</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>TCP</code>：指的是 <code>TCP</code> 的 <strong>三次握手</strong> 的过程。</p>\\n</li>\\n<li>\\n<p><code>Request</code>：浏览器发起的请求时间。</p>\\n</li>\\n<li>\\n<p><code>Response</code>：服务端的响应时间。</p>\\n</li>\\n<li>\\n<p><code>Processing</code>：浏览器处理服务器返回的数据的时间。</p>\\n</li>\\n<li>\\n<p><code>Load</code>：页面加载的时间。</p>\\n</li>\\n</ol>"}');export{v as comp,m as data};
