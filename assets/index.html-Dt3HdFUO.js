import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as n,b as a}from"./app-DMgN_Nia.js";const l="/web-docs/assets/mvc-Bj29wjiV.png",t="/web-docs/assets/mvvm-QNothcap.jpg",h={},e=a('<h1 id="mvvm-和-mvc-体系" tabindex="-1"><a class="header-anchor" href="#mvvm-和-mvc-体系"><span>MVVM 和 MVC 体系</span></a></h1><h3 id="数据驱动思想" tabindex="-1"><a class="header-anchor" href="#数据驱动思想"><span>数据驱动思想</span></a></h3><ul><li>我们不会直接操作 DOM。</li><li>我们操作的是数据【当我们修改了数据，框架会按照相关的数据，让页面重新渲染】。</li><li>框架底层实现视图的渲染，也是基于操作 DOM 完成的 <ul><li>构建了一套 虚拟DOM -&gt; 真实DOM 的渲染体系。</li><li>有效避免了 DOM 的 重排/重绘。</li></ul></li><li>开发效率更高，最后的性能也相对较好。</li></ul><p><strong>Vue 框架采用的是 MVVM 体系，React 框架采用的是 MVC 体系</strong>。</p><h3 id="mvc-体系" tabindex="-1"><a class="header-anchor" href="#mvc-体系"><span>MVC 体系</span></a></h3><p><img src="'+l+`" alt="mvc"></p><ul><li>M: model（数据层）。</li><li>V: view（视图层）。</li><li>C: controller（控制层）。</li></ul><ol><li><p>我们需要按照专业的语法去构建 <strong>视图（页面）</strong>，React 中是基于 <code>jsx</code> 语法来构建的。</p></li><li><p><strong>构建数据层</strong>：但凡在视图中，需要 <strong>&quot;动态&quot;</strong> 处理的（或者是变化的，不管是数据还是样式），我们都需要有对应的 <strong>数据模型</strong>。</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" data-title="tsx" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> React</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;react&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ReactDOM</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;react-dom/client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Count</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;">  state</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">state</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">        {</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/* 在页面当中，这个 num 是变化的，所以在 state 中就需要有一个 num 变量来代表对应的数据模型，也就是构建数据层。 */</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">          num</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">++</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">          this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">            num</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          累加</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>控制层</strong>：当我们在 <strong>视图</strong> 中（或者根据业务需求）进行某些操作的时候，都是去修改相关的数据，然后 React 框架会按照最新的数据，重新渲染视图，以至让用户看到最新的结果。</p></li><li><p>所以，整套 <strong>MVC</strong> 机制就是通过 <strong>数据驱动视图的渲染</strong>。（<strong>和 MVVM 的区别</strong>）</p></li><li><p>如果 react 中视图的表单内容发生变化，<strong>react 不会自动</strong> 帮助我们更新数据层中的变量，需要开发者自己在代码中实现。（<strong>单向驱动</strong>）</p></li></ol><h3 id="mvvm-体系" tabindex="-1"><a class="header-anchor" href="#mvvm-体系"><span>MVVM 体系</span></a></h3><p><img src="`+t+'" alt="mvvm"></p><ul><li>M: model（数据层）。</li><li>V: view（视图层）。</li><li>VM: viewModel（视图模型层）。</li></ul><ol><li><strong>MVVM</strong> 体系也是 <strong>数据驱动视图的渲染</strong>，当我们修改了数据层中的数据后，<strong>VM层</strong> 会 <strong>监听</strong> <strong>数据层</strong> 的变化，进而去修改 <strong>视图层</strong>，渲染最新的结果到页面上。</li><li><strong>MVVM</strong> 体系还实现了 <strong>视图驱动数据的更新</strong>，只要页面中的数据发生了变化，<strong>VM层</strong> 会 <strong>监听</strong> <strong>视图层</strong> 的变化，自动去修改 <strong>数据层</strong> 中的对应变量。（例如：我们在页面的 input 输入框中通过 v-model 绑定了一个变量，当我们在页面中输入数据的时候，v-model 绑定的数据层中的对应变量也会发生变化）</li><li>所以，<strong>MVVM</strong> 体系是一个 <strong>&quot;双向驱动&quot;</strong>。（<strong>和 MVC 的区别</strong>）</li></ol>',12),k=[e];function p(r,d){return n(),i("div",null,k)}const c=s(h,[["render",p],["__file","index.html.vue"]]),B=JSON.parse('{"path":"/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/MVVM%E5%92%8CMVC/","title":"MVVM 和 MVC 体系","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"数据驱动思想","slug":"数据驱动思想","link":"#数据驱动思想","children":[]},{"level":3,"title":"MVC 体系","slug":"mvc-体系","link":"#mvc-体系","children":[]},{"level":3,"title":"MVVM 体系","slug":"mvvm-体系","link":"#mvvm-体系","children":[]}],"git":{"createdTime":1724532946000,"updatedTime":1724532946000,"contributors":[{"name":"wr","email":"893634104@qq.com","commits":1}]},"readingTime":{"minutes":2.26,"words":677},"filePathRelative":"面试题/前端/框架/MVVM和MVC/README.md","localizedDate":"2024年8月25日","excerpt":"\\n<h3>数据驱动思想</h3>\\n<ul>\\n<li>我们不会直接操作 DOM。</li>\\n<li>我们操作的是数据【当我们修改了数据，框架会按照相关的数据，让页面重新渲染】。</li>\\n<li>框架底层实现视图的渲染，也是基于操作 DOM 完成的\\n<ul>\\n<li>构建了一套 虚拟DOM -&gt; 真实DOM 的渲染体系。</li>\\n<li>有效避免了 DOM 的 重排/重绘。</li>\\n</ul>\\n</li>\\n<li>开发效率更高，最后的性能也相对较好。</li>\\n</ul>\\n<p><strong>Vue 框架采用的是 MVVM 体系，React 框架采用的是 MVC 体系</strong>。</p>"}');export{c as comp,B as data};
