import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as n}from"./app-fQyFsxl4.js";const e={},l=n(`<h1 id="typescript-面试题" tabindex="-1"><a class="header-anchor" href="#typescript-面试题"><span>TypeScript 面试题</span></a></h1><h2 id="说说你对-typescript-的理解-与-javascript-的区别" tabindex="-1"><a class="header-anchor" href="#说说你对-typescript-的理解-与-javascript-的区别"><span>说说你对 TypeScript 的理解？与 JavaScript 的区别？</span></a></h2><p>TypeScript 是 JavaScript 的类型的超集，⽀持 ES6 语法，⽀持⾯向对象编程的概念，如类、接⼝、继承、泛型等。</p><h2 id="说说-typescript-的数据类型有哪些" tabindex="-1"><a class="header-anchor" href="#说说-typescript-的数据类型有哪些"><span>说说 typescript 的数据类型有哪些？</span></a></h2><p>和 <code>javascript</code> 基本⼀致，也分成：</p><ul><li>基本类型</li><li>引⽤类型</li></ul><p>在基础类型上，<code>typescript</code> 增添了 <code>void</code>、 <code>any</code>、 <code>emum</code> 等原始类型。</p><h2 id="说说你对-typescript-中高级类型的理解-有哪些" tabindex="-1"><a class="header-anchor" href="#说说你对-typescript-中高级类型的理解-有哪些"><span>说说你对 TypeScript 中⾼级类型的理解？有哪些？</span></a></h2><p>除了 <code>string</code> 、 <code>number</code> 、 <code>boolean</code> 这种基础类型外，在 <code>typescript</code> 类型声明中还存在⼀些⾼级的类型应⽤。</p><p>这些⾼级类型，是 <code>typescript</code> 为了保证语⾔的灵活性，所使⽤的⼀些语⾔特性。这些特性有助于我们应对复杂多变的开发场景。</p><p>包括：</p><ul><li>交叉类型</li><li>联合类型</li><li>类型别名</li><li>类型索引</li><li>类型约束</li><li>映射类型</li><li>条件类型</li></ul><h3 id="交叉类型" tabindex="-1"><a class="header-anchor" href="#交叉类型"><span>交叉类型</span></a></h3><p>通过 <code>&amp;</code> 将多个类型合并为⼀个类型，包含了所需的所有类型的特性，本质上是⼀种并的操作语法如下：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;">    age</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> U</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;">    gender</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> TU</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> U</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 这里就是把类型T 和 类型U 进行交叉合并</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 报错，缺少 gender 属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> obj1</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> TU</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  age</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> TU</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  age</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  gender</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型"><span>联合类型</span></a></h3><p>联合类型的语法规则和逻辑 <strong>“或”</strong> 的符号⼀致，表⽰其类型为连接的多个类型中的任意⼀个，本质上是⼀个交的关系。</p><p>语法如下：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> U</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> boolean</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 123</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 错误，只能是 number、string、boolean 中的其中一种</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="说说你对-typescript-中泛型的理解-应用场景" tabindex="-1"><a class="header-anchor" href="#说说你对-typescript-中泛型的理解-应用场景"><span>说说你对 TypeScript 中泛型的理解？应用场景？</span></a></h2>`,22),t=[l];function p(h,k){return a(),s("div",null,t)}const c=i(e,[["render",p],["__file","index.html.vue"]]),y=JSON.parse('{"path":"/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%89%8D%E7%AB%AF/TypeScript/","title":"TypeScript 面试题","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"说说你对 TypeScript 的理解？与 JavaScript 的区别？","slug":"说说你对-typescript-的理解-与-javascript-的区别","link":"#说说你对-typescript-的理解-与-javascript-的区别","children":[]},{"level":2,"title":"说说 typescript 的数据类型有哪些？","slug":"说说-typescript-的数据类型有哪些","link":"#说说-typescript-的数据类型有哪些","children":[]},{"level":2,"title":"说说你对 TypeScript 中⾼级类型的理解？有哪些？","slug":"说说你对-typescript-中高级类型的理解-有哪些","link":"#说说你对-typescript-中高级类型的理解-有哪些","children":[{"level":3,"title":"交叉类型","slug":"交叉类型","link":"#交叉类型","children":[]},{"level":3,"title":"联合类型","slug":"联合类型","link":"#联合类型","children":[]}]},{"level":2,"title":"说说你对 TypeScript 中泛型的理解？应用场景？","slug":"说说你对-typescript-中泛型的理解-应用场景","link":"#说说你对-typescript-中泛型的理解-应用场景","children":[]}],"git":{"createdTime":1720734508000,"updatedTime":1720734508000,"contributors":[{"name":"wr","email":"893634104@qq.com","commits":1}]},"readingTime":{"minutes":1.38,"words":415},"filePathRelative":"面试题/前端/TypeScript/README.md","localizedDate":"2024年7月12日","excerpt":"\\n<h2>说说你对 TypeScript 的理解？与 JavaScript 的区别？</h2>\\n<p>TypeScript 是 JavaScript 的类型的超集，⽀持 ES6 语法，⽀持⾯向对象编程的概念，如类、接⼝、继承、泛型等。</p>\\n<h2>说说 typescript 的数据类型有哪些？</h2>\\n<p>和 <code>javascript</code> 基本⼀致，也分成：</p>\\n<ul>\\n<li>基本类型</li>\\n<li>引⽤类型</li>\\n</ul>\\n<p>在基础类型上，<code>typescript</code> 增添了 <code>void</code>、 <code>any</code>、 <code>emum</code> 等原始类型。</p>"}');export{c as comp,y as data};
