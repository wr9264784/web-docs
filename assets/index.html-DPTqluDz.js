import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,b as e}from"./app-fQyFsxl4.js";const n="/assets/%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%84-DeuoOaQK.jpg",l="/assets/%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90-B4wl7xD-.png",h={},t=e(`<h1 id="vue-打包后资源加载路径和路由的前缀" tabindex="-1"><a class="header-anchor" href="#vue-打包后资源加载路径和路由的前缀"><span>vue 打包后资源加载路径和路由的前缀</span></a></h1><p>在 <code>vue2</code> 中，路由配置中的 <code>base</code> 和 <code>vue.config.js</code> 中的 <code>publicPath</code> 是特别容易混淆误解的。一旦没有搞清楚的话，就很容易出现本地开发的好好的，一旦更新到线上就各种访问不到。</p><p><code>/src/router/index.js</code>：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 省略.... ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  routes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  base</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/vue.config.js</code>：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;@vue/cli-service&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  transpileDependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  publicPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先从整体来看，这两个配置往往影响的是生产环境，对本地的话没什么影响，写不写这两个配置都能访问。但是，一到线上就肯定不一样了。</p><h2 id="publicpath-vue3-是-base" tabindex="-1"><a class="header-anchor" href="#publicpath-vue3-是-base"><span>publicPath（vue3 是 base）</span></a></h2><p>首先看 <code>publicPath</code>，它到底影响的是什么？我们知道现在用到 vue 开发也好、react 开发也好，它都是一个工程化的环境，我们的代码最终要运行是要经过打包的，这个 <code>publicPath</code> 影响的就是打包结果。</p><p>那么，打包结果长什么样子呢？我们先来看下打包后的 <code>dist</code> 目录结构：</p><p><img src="`+n+'" alt="打包结构"></p><p>打包的结果可以看到，它只有一个 <code>html</code> 页面。哪个感官上我们看这个网站里边有很多页面，但实际上它的 <code>html</code> 页面只有一个。</p><p>打包完成之后，我们会把打包后的结果全部交给运维，然后运维把它部署到生产环境。</p><p>然后部署的时候运维会做这么一件事，由于这是一个单页面应用程序，那么他就会做这么一个映射关系：</p><p>比方说，我们的域名是 <code>www.a.com</code>，当访问这个 <strong>根路径</strong>（也就是 <code>/</code>） 的时候，它会指向这个 <code>index.html</code>，于是浏览器拿到的就是这个 <code>index.html</code> 文件的内容。</p><p>当你去访问其他路径的时候，比方说 <code>www.a.com/a/b/c</code>，那么这个时候运维他会做这个映射，这样的路径它也会指向这个 <code>index.html</code> 页面。</p><p>那么对于浏览器而言，它就很神奇，它访问 <code>a.com</code> 和 <code>a.com/a/b/c</code> 拿到的都是同一个页面，因为这个单页面应用。这会有什么问题吗？其实没有问题，这些事情运维帮我们做好了。</p><p>顺便说一下，如果上线过后，发现首页能访问，但是其他页面访问的时候浏览器显示 <code>404</code>，找不到资源。这个时候 <code>90%</code> 的问题都是出现在运维那边。页面都拿不到，谈何去执行页面中 <code>js</code>、<code>css</code> 等资源。</p><p>现在，我们考虑这么一个情况，页面现在我们拿到了，现在交给前端程序来执行了。那么浏览器渲染页面，肯定就会加载 <code>index.html</code> 页面中引入的外部资源，包括 <code>js</code>、<code>css</code> 等，如下图所示：</p><p><img src="'+l+`" alt="加载资源"></p><p>但是，想要执行这些外部资源的前提条件是要能拿到这些外部资源，也就是我们页面已经拿到了，但是这些外部资源它是有可能拿不到的。</p><p>为什么有可能拿不到，比方说上图中的 <code>css</code> 文件 <code>css/about.1a8c3776.css</code>，这是一个 <strong>相对路径</strong>，只是省略了前面的 <code>./</code> 的写法，我们要访问这个 <code>css</code> 文件，最终是需要一个完整的 <code>url</code> 地址，也就说我们要访问这个 <code>css</code> 文件，它的完整 <code>url</code> 地址应该是 <code>www.a.com/css/about.1a8c3776.css</code>，这是一个正确的地址。</p><p>那么我们来看一下，在不同的情况下，它能不能生成一个正确的地址，假设用户访问的是 <code>www.a.com</code>，那么在这个地址下，看到的这个相对路径 <code>./css/about.1a8c3776.css</code>，它生成的完整的 <code>url</code> 地址是 <code>www.a.com/css/about.1a8c3776.css</code>。可以看到这是一个正确的地址，所以，用户会发现他访问首页的时候，这个页面是很正常的，<code>css</code>、<code>js</code> 等资源都能正常加载。</p><p>但是，如果用户直接访问 <code>www.a.com/a/b/c</code> 的话，由于打包的资源使用的是 <strong>相对路径</strong>，那么它最终生成的 <code>url</code> 地址是 <code>www.a.com/a/b/c/css/about.1a8c3776.css</code>，于是用户会发现首页没问题，访问其他页面的时候页面上什么都没有。</p><p>那遇到这种情况，就不是运维的问题了，是我们页面中写的这个路径有问题，这里就不能写相对路径。因为相对路径相对的是页面的，而在单页应用中，页面的路径是不稳定的。就会导致我们这些外部资源的路径无法稳定。</p><p>因此打包后的 <code>html</code>文件中，要加载的资源最好写 <strong>绝对路径</strong>，如 <code>/css/about.1a8c3776.css</code>。</p><p>把它写成绝对路径后就不一样了，它的资源文件的完整访问地址没变，仍然是通过 <code>www.a.com/css/about.1a8c3776.css</code> 进行访问。那么 <strong>绝对路径</strong> 就可以保证它一定生成的是这个地址。</p><p>为什么呢？来看看：</p><p>如果我们访问的是 <code>www.a.com</code> 页面，那么它 <strong>绝对路径</strong> 生成出来的资源访问地址就是 <code>www.a.com/css/about.1a8c3776.css</code> ，如果我们访问的是 <code>www.a.com/a/b/c</code> 页面，因为资源文件用的是 <strong>绝对路径</strong>，<strong>绝对路径</strong> 跟访问的页面路径是无关，仍然是从 <strong>根目录</strong> 出发，再到 <code>css/about.1a8c3776.css</code>，最后生成的也是 <code>www.a.com/css/about.1a8c3776.css</code> 。</p><p>这样就保证在不同页面的访问路径下，都能正确加载外部的资源。</p><p>也就是说，我们打包出来的 <code>index.html</code> 页面中，我们需要去控制这些资源文件路径的前缀，而这个前缀如何来控制呢？就是通过 <code>vue.config.js</code>文件中的 <code>publicPath</code> 进行配置：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;@vue/cli-service&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  transpileDependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 如果不配置，或者配置了什么都不写，那么就是相对路径</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // publicPath: &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 如果配置一个 &#39;/&#39;，那么重新打包后资源路径就是绝对路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  publicPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以说，<strong><code>vue.config.js</code> 里边的 <code>publicPath</code> 控制的就是打包的结果中那些外部资源的链接前缀，它影响了外部资源是否能够正确地加载出来</strong>。</p><p>而且，实际上这个 <code>publicPath</code> 并不是 <code>vue</code> 提供的配置，而是 <code>webpack</code>，因为 <code>vue-cli</code> 它本身内部用的就是 <code>webpack</code>。</p><p>注意：<strong>在 <code>vue3</code> 中，使用的是 <code>vite</code> 进行打包，配置会有不同，是在 <code>vite.config.js</code> 中的 <code>base</code> 属性进行配置</strong>：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fileURLToPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;node:url&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;vite&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> vue</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;@vitejs/plugin-vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// https://vitejs.dev/config/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    vue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">      &#39;@&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">fileURLToPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;./src&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  base</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 这里更改打包后资源的 相对路径/绝对路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>详情可以查看：https://cn.vitejs.dev/config/shared-options.html#base。</p><h2 id="base-vue3-是在-createwebhistory-参数中配置" tabindex="-1"><a class="header-anchor" href="#base-vue3-是在-createwebhistory-参数中配置"><span>base（vue3 是在 createWebHistory 参数中配置）</span></a></h2><p>这里再举个例子，比方说我们的网站运维在上线的时候，他是把我们的整个站点部署到一个子目录下面的，就是我们的页面是不能直接通过 <code>www.a.com</code> 来访问的，而是通过 <code>www.a.com/admin</code> 来访问。</p><p>比方说我们是一个后台页面，前面都有一个前缀 <code>admin</code>，通过这样的地址来访问，包括后面的一些子路径也是这样 <code>www.a.com/admin/a/b/c</code>。</p><p>那么这个时候我们的资源是不是也要相应地加上这个前缀。因此我们就需要在 <code>publicPath</code> 中配置 <code>/admin</code>。</p><p>好了，说完这个 <code>publicPath</code>，再说回 <code>router</code> 里边的 <code>base</code>。</p><p>这个 <code>base</code> 有影响的是什么呢？现在呢，我们的页面能正常访问了，这些外部资源也能正常加载了，那加载了 <code>js</code> 过后就需要运行 <code>js</code>，要运行 <code>js</code> 就被 <code>vue</code> 所接管了，因为 <code>js</code> 代码里就有 <code>vue</code> 的代码，那么在 <code>vue</code> 的代码里边有一个 <code>Vue Router</code>，它会根据路径去匹配对应的组件，这是一个配置，我们都写在 <code>/src/router/index.js</code> 的路由列表中。</p><p>那么这个路径匹配有没有可能出问题呢？它是有可能出问题的，注意，现在出问题的时间点在哪？是在 <code>js</code> 已经拿到了，正在执行的过程中，路由配置的 <code>js</code> 代码出现了问题，它匹配不上组件了。</p><p>它怎么会匹配不上组件呢？比方说我们上面的情况 <code>www.a.com/admin</code>，我们本地是没有这个前缀的，能够正常匹配，但是上线后有了这个前缀，你会发现怎么都匹配不上组件。</p><p>所以，造成的现象是什么？用户能进入这个页面，浏览器没有报 <code>404</code>，但是用户它匹配不上组件。那么这个时候确实是前端的问题。</p><p>具体怎么解决呢？比较粗暴的办法呢，就是在每个路由配置前面给它加上一个 <code>admin</code>：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/admin/article&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Article&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Article</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  routes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样能解决问题，但是这样做并不好。因为你是一个开发人员，你根本不知道运维将来会将我们打包后的文件放到什么样的子目录下，也就是我们无法确认这个前缀。</p><p>所以，我们最好不要把这个前缀写死到我们的路由配置表里边。</p><p>那么，应该定义到哪呢？定义到创建路由的时候，配置一个 <code>base</code> 属性：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/article&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Article&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Article</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  routes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  base</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/admin&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写上这个 <code>base</code> 的目的就是告诉路由，将来在匹配的时候，给每一个 <code>path</code> 加上一个前缀来进行匹配。</p><p>所以，<code>base</code> <strong>影响的是组件匹配</strong>。</p><p>注意：<strong>在 <code>vue3</code> 的 <code>vue-router4</code> 以上的版本中，<code>base</code> 的配置发生了变化，<code>base</code> 配置被作为 <code>createWebHistory</code> (其他 <code>history</code> 也一样)的第一个参数传递</strong>：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">createRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">createWebHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;vue-router&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">createRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  history</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">createWebHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/base-directory/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  routes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>详细可以查看 <a href="https://router.vuejs.org/zh/guide/migration/#%E7%A7%BB%E5%8A%A8%E4%BA%86-base-%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">vue-router 的从 vue2 迁移说明</a>。</p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><p>在实际开发里边，<code>publicPath</code> 和 <code>base</code> 往往都不是写死的，在开发阶段我们甚至不知道应该写什么，因为这是运维的事。所以，一般情况下，这两个配置都是会写到 <strong>环境变量</strong> 里边的。<code>vue</code> 的工程化的环境里边是支持 <strong>环境变量</strong> 的。</p><p>在本地，我们可以随便定义路由，到了运维那边他会更改这个环境变量，并不会修改你的代码。</p>`,60),p=[t];function d(k,c){return a(),i("div",null,p)}const g=s(h,[["render",d],["__file","index.html.vue"]]),B=JSON.parse(`{"path":"/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Vue/Vue2/%E4%BB%A3%E7%A0%81%E5%92%8C%E5%B0%8F%E6%A1%88%E4%BE%8B/%E6%89%93%E5%8C%85%E5%90%8E%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E8%B7%AF%E5%BE%84%E5%92%8C%E8%B7%AF%E7%94%B1%E7%9A%84%E5%89%8D%E7%BC%80/","title":"vue 打包后资源加载路径和路由的前缀","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"publicPath（vue3 是 base）","slug":"publicpath-vue3-是-base","link":"#publicpath-vue3-是-base","children":[]},{"level":2,"title":"base（vue3 是在 createWebHistory 参数中配置）","slug":"base-vue3-是在-createwebhistory-参数中配置","link":"#base-vue3-是在-createwebhistory-参数中配置","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}],"git":{"createdTime":1720303462000,"updatedTime":1720303462000,"contributors":[{"name":"wr","email":"893634104@qq.com","commits":1}]},"readingTime":{"minutes":8.65,"words":2595},"filePathRelative":"前端/框架/Vue/Vue2/代码和小案例/打包后资源加载路径和路由的前缀/README.md","localizedDate":"2024年7月7日","excerpt":"\\n<p>在 <code>vue2</code> 中，路由配置中的 <code>base</code> 和 <code>vue.config.js</code> 中的 <code>publicPath</code> 是特别容易混淆误解的。一旦没有搞清楚的话，就很容易出现本地开发的好好的，一旦更新到线上就各种访问不到。</p>\\n<p><code>/src/router/index.js</code>：</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#E5C07B\\"> routes</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> [ </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">// 省略.... ]</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">const</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> router</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> VueRouter</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">  routes</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">  base</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">'/'</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">})</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{g as comp,B as data};
