import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,b as e}from"./app-DMgN_Nia.js";const n="/web-docs/assets/%E7%BB%84%E4%BB%B6ts%E7%B1%BB%E5%9E%8B_01-yUx82Qbb.png",t="/web-docs/assets/%E7%BB%84%E4%BB%B6ts%E7%B1%BB%E5%9E%8B_02-C08-4CIg.png",l="/web-docs/assets/%E7%BB%84%E4%BB%B6ts%E7%B1%BB%E5%9E%8B_03-BG8v3Ken.png",p="/web-docs/assets/%E7%BB%84%E4%BB%B6ts%E7%B1%BB%E5%9E%8B_04-CkEM-vGK.png",h="/web-docs/assets/%E7%BB%84%E4%BB%B6ts%E7%B1%BB%E5%9E%8B_05-CA2bYfmk.png",d="/web-docs/assets/%E7%BB%84%E4%BB%B6ts%E7%B1%BB%E5%9E%8B_06-Ch7LuUri.png",k="/web-docs/assets/%E7%BB%84%E4%BB%B6ts%E7%B1%BB%E5%9E%8B_07-DHZQHy9p.png",r="/web-docs/assets/%E7%BB%84%E4%BB%B6ts%E7%B1%BB%E5%9E%8B_08-BhcWrACh.png",o="/web-docs/assets/%E7%BB%84%E4%BB%B6ts%E7%B1%BB%E5%9E%8B_09-Bfbaf-xP.png",c="/web-docs/assets/%E7%BB%84%E4%BB%B6ts%E7%B1%BB%E5%9E%8B_10-Uk5cJUk5.png",B="/web-docs/assets/%E7%BB%84%E4%BB%B6ts%E7%B1%BB%E5%9E%8B_11-Ch9dDbup.png",g="/web-docs/assets/%E7%BB%84%E4%BB%B6ts%E7%B1%BB%E5%9E%8B_12-CRbaJPxD.png",E="/web-docs/assets/%E7%BB%84%E4%BB%B6ts%E7%B1%BB%E5%9E%8B_13-DbI_i3tI.png",m={},y=e(`<h1 id="获取组件的-ts-类型" tabindex="-1"><a class="header-anchor" href="#获取组件的-ts-类型"><span>获取组件的 TS 类型</span></a></h1><p>先来看以下代码：</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" data-title="vue" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">el-form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;formRef&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">model</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">form</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!-- 省略其他组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!-- ....其它表单组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">el-form</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;vue&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ElForm</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;element-plus&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">defineOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;GetComInstance&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> form</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里希望能通过 <code>el-form</code> 组件绑定的 <code>ref</code>，也就是通过 <code>formRef</code> 拿到 <code>el-form</code> 组件的实例，然后可以调用它里边的方法。</p><p>但是当我们使用 <code>formRef.value.xx</code> 的时候，我们会发现这里没有任何智能提示：</p><p><img src="`+n+'" alt="组件ts类型_01"></p><p>那么我们需要怎么解决呢？首先鼠标指着这个 <code>.value</code> 属性，看下它的类型：</p><p><img src="'+t+'" alt="组件 ts 类型_02"></p><p>可以看到 <code>formRef.value</code> 的类型是 <code>any</code>，它为什么是 <code>any</code> 呢？其实它前面已经在提示你了，因为你这个 <code>Ref</code> 是一个泛型，而你没有给这个泛型传递任何参数，那么它就是 <code>any</code>。</p><p>如果我们试着给这个 <code>ref</code> 传递一个泛型：</p><p><img src="'+l+'" alt="组件 ts 类型_03"></p><p>再看看 <code>.value</code> 的类型：</p><p><img src="'+p+'" alt="组件 ts 类型_04"></p><p>我们可以发现 <code>.value</code> 的类型就变成了联合类型 <code>string | undefined</code>，为什么会加 <code>undefined</code> 呢？因为我们在通过 <code>ref</code> 声明变量的时候，并没有给默认值，那么它的默认值就是 <code>undefined</code>。</p><p>如果给它传了默认值后：</p><p><img src="'+h+'" alt="组件 ts 类型_05"></p><p>再看 <code>.value</code> 的类型，就会变成 <code>string</code>，如下所示：</p><p><img src="'+d+'" alt="组件 ts 类型_06"></p><p>问题是一开始要传递什么的泛型呢？有些人可能会觉得是不是直接把 <code>ElForm</code> 组件传递进去呢？但是你会发现报错了：</p><p><img src="'+k+'" alt="组件 ts 类型_07"></p><p>它已经明确提示你了，我们当前传递进去的 <code>ElForm</code> 表示的是值，但是你把它当成类型使用了。</p><p>所以这里的正确做法是什么？应该拿到 <code>ElForm</code> 组件的类型，那就应该使用 <code>TS</code> 里边的 <code>typeof</code>，这个 <code>typeof</code> 并不是 <code>js</code> 里边的 <code>typeof</code>。而是写到 <code>TS</code> 的类型标注，用来获取某一个东西的 <code>TS</code> 类型：</p><p><img src="'+r+'" alt="组件ts类型_08"></p><p>在使用了 <code>typeof</code> 获取 <code>ElForm</code> 组件类型后，传递给 <code>ref</code>，我们再来看看 <code>.value</code> 的类型：</p><p><img src="'+o+'" alt="组件ts类型_09"></p><p>我们可以看到现在的 <code>.value</code> 的类型有这么一大堆东西，那么当我们使用 <code>formRef.value.xx</code> 的是不是应该就有智能提示，告诉我们这个 <code>.value</code> 身上会有哪些属性或方法呢？看以下图所示：</p><p><img src="'+c+'" alt="组件ts类型_10"></p><p>我们都知道 <code>ElForm</code> 组件实例里边有一个实例方法叫做 <code>validate</code>，但是上图中，我们通过智能提示并没有找到对应的方法。</p><p>我们仔细看上图的智能提示，怎么看好像也不太像是一个组件实例，倒像是一个组件的配置。</p><p>这里就要说清楚一个概念了，叫作 <strong>模板</strong> 和 <strong>实例</strong>。</p><p>比方说写了这么一个类：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>A</code> 是一个 <strong>类</strong>，<code>A</code> 的 <strong>类型</strong> 是 <strong>函数</strong>，所以 <code>A</code> 里边有 <code>prototype</code>、<code>bind</code>、<code>apply</code>、<code>call</code> 等属性和方法。这些都是 <code>A</code> 里边的成员，它是一个类型、是一个构造函数。</p><p>而我们通过这个 <code>A</code> 去创建一个对象：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那么这个 <code>a</code> 是 <code>A</code> 的实例，它们不是同一个东西。一个是通过函数创建的实例，另一个是函数。</p><p>那么 <code>a</code> 里边会有 <code>prototype</code>、<code>bind</code>、<code>apply</code>、<code>call</code> 等 <strong>函数</strong> 里边才会有的属性和方法吗？答案是都没有！</p><p>所以，这里要分清楚，<code>A</code> 是创建实例的 <strong>模板</strong>，<code>a</code> 是通过 <strong>模板</strong> 创建的实例。</p><p>那么回到原文中，这个 <code>ElForm</code> 是什么呢？在代码中，我们通过鼠标指向这个 <code>ElForm</code>，然后通过<code>ctrl + 鼠标左键</code> 点击这个 <code>Elform</code> 就会跳转到 <code>ElForm</code> 组件的源码。</p><p>我们可以看到这个 <code>ElForm</code> 是通过 <code>DefineComponent</code> 创建出来的一个 <code>vue</code> 配置对象，如下图所示：</p><p><img src="'+B+'" alt="组件ts类型_11"></p><p>这个配置对象是一个 <strong>模板</strong>，用这个 <strong>模板</strong> 可以产生各种各样的组件实例。</p><p>所以 <code>typeof ElForm</code> 拿到的类型是 <strong>模板</strong>，而我们不需要这个 <strong>模板</strong> 的类型，我们需要的是这个 <strong>模板</strong> 创建的 <strong>组件实例</strong> 的类型。</p><p>那么我们怎么得到一个 <strong>模板</strong> 的实例呢？我们可以使用一个 <code>TS</code> 提供的内置的 <code>InstanceType</code> 工具类型来获取其实例类型：</p><p><img src="'+g+'" alt="组件ts类型_12"></p><p>然后我们再看看下此时 <code>.value</code> 身上的实例方法：</p><p><img src="'+E+'" alt="组件ts类型_13"></p><p>可以看到，此时智能提示中就已经有了 <code>ElForm</code> 组件实例身上的 <code>validate</code> 方法了。</p><p>说明此时的 <code>InstanceType&lt;typeof ElForm&gt;</code> 就是正确地拿到了 <code>ElForm</code> 组件的实例类型。</p>',49),v=[y];function A(F,u){return a(),i("div",null,v)}const C=s(m,[["render",A],["__file","index.html.vue"]]),_=JSON.parse(`{"path":"/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Vue/Vue3/%E4%BB%A3%E7%A0%81%E5%92%8C%E5%B0%8F%E6%A1%88%E4%BE%8B/%E8%8E%B7%E5%8F%96%E7%BB%84%E4%BB%B6%E7%9A%84%20TS%20%E7%B1%BB%E5%9E%8B/","title":"获取组件的 TS 类型","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1720303462000,"updatedTime":1720303462000,"contributors":[{"name":"wr","email":"893634104@qq.com","commits":1}]},"readingTime":{"minutes":4.3,"words":1289},"filePathRelative":"前端/框架/Vue/Vue3/代码和小案例/获取组件的 TS 类型/README.md","localizedDate":"2024年7月7日","excerpt":"\\n<p>先来看以下代码：</p>\\n<div class=\\"language-vue line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"vue\\" data-title=\\"vue\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#E06C75\\">template</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">  &lt;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#E06C75\\">el-form</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#D19A66\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"formRef\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> :</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#D19A66\\">model</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#ABB2BF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">form</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#ABB2BF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">    &lt;!-- 省略其他组件 --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">    &lt;!-- ....其它表单组件 --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">  &lt;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#E06C75\\">el-form</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&lt;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#E06C75\\">template</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#E06C75\\">script</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#D19A66\\"> setup</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#D19A66\\"> lang</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"ts\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> { </span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> \\"vue\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> { </span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">ElForm</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> 'element-plus'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">defineOptions</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">  name</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">'GetComInstance'</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">})</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#E5C07B\\"> form</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&lt;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#E06C75\\">script</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{C as comp,_ as data};
